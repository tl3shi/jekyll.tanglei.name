<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tanglei's blog|唐磊的个人博客</title>
    <description>中南大学|清华大学软件学院唐磊的博客,主攻软件工程,数据挖掘,这里记录了我的学习,生活和工作</description>
    <link>https://www.tanglei.name/</link>
    <atom:link href="https://www.tanglei.name/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 30 Dec 2016 17:29:37 +0000</pubDate>
    <lastBuildDate>Fri, 30 Dec 2016 17:29:37 +0000</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>微信公众号原创声明|留言功能体验</title>
        <description>&lt;p&gt;我的微信公众号 “唐磊Coder” 从11月9号开始发第一篇文章至今, 一共发布8篇文章, 历时48天, 现在终于有了&lt;strong&gt;原创声明功能&lt;/strong&gt;以及评论功能了. 这篇文章也是为了纪念一下, 同时也体验一下新功能. 当然这都得感谢大家的支持.&lt;/p&gt;

&lt;p&gt;刚开始以为8篇文章肯定是不够的, 看了下关注的公众号, 从第一篇到有评论功能一般至少得10篇以上. 时间的话, 也有40+天收到”原创声明功能”邀请的(知乎上也有说有1个月就能拿到这个资格的, 但比较少).&lt;/p&gt;

&lt;p&gt;这里分享一些本号的一些基本数据, 微信后台的统计数据如下图所示.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/wechat/tangleithu-wechat-comment-data.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中, 微信客户端阅读总数为 1.4W+, 覆盖人群 4k+ 人, 好友帮忙转发了415次(再次感谢圈内朋友帮忙转发). 从这些数据还能发现一些有意思的数据.&lt;/p&gt;

&lt;p&gt;比如微信某天的数据”图文页阅读-人数”(UV, 微信的数据跟传统的 UV 还有区别的)最多, 但 “图文页阅读-次数”(PV, 也跟传统 PV 有区别) 不一定是最多. &lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI3OTUzMzcwNw==&amp;amp;mid=2247483682&amp;amp;idx=1&amp;amp;sn=6898a3519934b38a4fd75d2130560e82&amp;amp;chksm=eb4700c6dc3089d0e8c429118c2bda7d4ae1bad88f8603dbd3a74ab846fac9dc41a35b7e0051&amp;amp;scene=21#wechat_redirect&quot;&gt;Mac 软件推荐&lt;/a&gt; 这篇文章阅读&lt;strong&gt;人数(UV)&lt;/strong&gt;是最多的; 阅读次数最多的那天对应的阅读人数不一定是最多. &lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI3OTUzMzcwNw==&amp;amp;mid=2247483729&amp;amp;idx=1&amp;amp;sn=617bb23f2e9e034e06a4b573f7d1a788&amp;amp;chksm=eb4700b5dc3089a35a5ce6d35bea00fd0c26c00f46af53d57dee28ed048734668e7e9c7bf242&amp;amp;scene=21#wechat_redirect&quot;&gt;从一道面试题谈谈一线码农应该具备的基本素质&lt;/a&gt; 这篇文章阅读&lt;strong&gt;次数(PV)&lt;/strong&gt;是最多的; 当然这个数据也是合理的, 因为前面一篇一般来说不需要怎么思考, 而后者可能需要一定的思考, 且有可能还要反复的看, 因此造成这篇文章的 PV 增高.&lt;/p&gt;

&lt;p&gt;p.s 终于能在文章里面贴链接了, 虽然只能链接到以往发送过的文章, 并且这个链接只能通过微信公众号后台选择历史文章的链接, 不能直接用 markdown 贴链接(会提示”&lt;strong&gt;请勿插入不合法的已群发的图文消息链接&lt;/strong&gt;”),
&lt;del&gt;就算这两个链接是一样的&lt;/del&gt;, 自己从公众号历史消息copy的链接和公众号后台插入的链接是不一样的),  外链目前仍然不可以, 例如我的博客地址: &lt;a href=&quot;https://www.tanglei.name&quot;&gt;https://www.tanglei.name&lt;/a&gt; 仍然会被过滤掉, 上面两篇文章可以直接点击链过去.&lt;/p&gt;

&lt;p&gt;再次感谢大家的支持, 去留个言试试?&lt;/p&gt;

</description>
        <pubDate>Thu, 29 Dec 2016 00:00:00 +0000</pubDate>
        <link>https://www.tanglei.name/blog/tangleithu-comment-feature.html</link>
        <guid isPermaLink="true">https://www.tanglei.name/blog/tangleithu-comment-feature.html</guid>
        
        <category>经验技巧</category>
        
        <category>微信公众号</category>
        
        
        <category>经验技巧</category>
        
      </item>
    
      <item>
        <title>我的博客之路</title>
        <description>&lt;p&gt;我大约在2010年左右有了自己的第一个域名, 也是从那个时候开始搭建博客的. 第一个域名是 &lt;code class=&quot;highlighter-rouge&quot;&gt;i3zhai.com&lt;/code&gt; “爱山寨”, 也是从哪个时候开始玩网站的. 想当初, 还挂了一个 BBS, 就以 “山寨” 产品推荐和评测为主, 想着可以通过一个论坛来赚广告费呢. 然而并没有发现有什么点击量, 后来就放弃了.&lt;/p&gt;

&lt;p&gt;刚开始就用这个 &lt;code class=&quot;highlighter-rouge&quot;&gt;i3zhai.com&lt;/code&gt; 域名搭建了 Blog, 后台搞起了 wordpress, 慢慢接触一些 Blog 的玩法. 比如可以在 Blog 上挂一些广告外链赚点广告费啊(基本上能够抹平域名+虚拟主机的钱), 感觉这个域名太”山寨”后来就直接换成了我现在的主要域名 &lt;code class=&quot;highlighter-rouge&quot;&gt;tanglei.name&lt;/code&gt;, 意思说从2010年开始这个博客就一直存在了, 目前400篇文章左右, 大部分是水文, 感觉真正有质量的文章也就几十来篇吧. 其中还包括当初复习考试的一些笔记啊等. 陆陆续续迁移了好几个版本, 历史文章也”舍不得”丢弃, 也一直保留着. 其实好多文章真没什么价值, 也舍不得抛弃, 毕竟当初辛辛苦苦 po 出来的, 也就这样保留着吧, 记录一下”历史”进程.&lt;/p&gt;

&lt;p&gt;我的 blog 主要经过了一下几个历程:&lt;/p&gt;

&lt;h3 id=&quot;纯-wordpress&quot;&gt;纯 wordpress&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/resources/blog-historys/wordpress.tanglei.name.png&quot; alt=&quot;唐磊的 wordpress 博客&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是最初级的版本, 相当长一段时间内也一直用上面这个主题, 后来接触到 &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown&lt;/code&gt; 这个标记语言, 发现这玩意太好用了, 就一发不可收拾, 但想着这个主题用着也挺好的, 也不想换, 于是演化出了第二个版本&lt;/p&gt;

&lt;h3 id=&quot;wordpress--markdown&quot;&gt;wordpress + markdown&lt;/h3&gt;

&lt;p&gt;由于没有找到合适的 wordpress 的 markdown 插件, 于是就自己写了一个 &lt;a href=&quot;https://github.com/tl3shi/markdown2wordpress&quot;&gt;markdown2wordpress&lt;/a&gt;. 后端框架等仍然用 wordpress, 繁琐的排版等问题就直接交给 markdown, 不用登陆 wordpress 后台进行调整等操作.&lt;/p&gt;

&lt;p&gt;这个工具依赖于python-wordpress-xmlrpc, 一个 python 实现的 wordpress 的客户端, 可以方便调用 wordpress 提供的接口, markdown 的渲染依赖于 pandoc, 代码高亮用的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;highlight.js&lt;/code&gt;
图片用图床的形式, 或者直接以 github 外链的形式.&lt;/p&gt;

&lt;p&gt;因此我用这个工具又坚持了一阵, 当然这期间也&lt;a href=&quot;https://www.tanglei.name/blog/github-with-octopress.html&quot;&gt;尝试过使用一些 octopress 等博客引擎&lt;/a&gt;, 但一直没找到一个顺眼的主题.&lt;/p&gt;

&lt;h3 id=&quot;jekyll&quot;&gt;jekyll&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/resources/blog-historys/jekyll.tanglei.name.png&quot; alt=&quot;唐磊的 jekyll 博客&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再后来, 发现 wordpress 还是太臃肿了, 于是就直接抛弃了. 这篇博文记录了迁移过程: &lt;a href=&quot;https://www.tanglei.name/blog/give-up-wordpress-to-jekyll.html&quot;&gt;最终还是放弃了Wordpress&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;jekyll或者octopress这类的博客引擎的好处在于, 用 markdown 书写, 编译后直接生成 html, 直接 host 在 github 上即可. 因此我用 github pages host 了我的博客近1年左右.&lt;/p&gt;

&lt;p&gt;目前比较流行的轻量级博客解决方案都是类似的方式, 前端用便于书写的 markdown, 渲染成 html, 用github pages 或者 coding.net 等托管静态 html.&lt;/p&gt;

&lt;p&gt;在于做的好处在于, 博主们真正关注的只需要写 markdown 就可以了(类似写论文用 latex 一样), 不用去关注比如在 wordpress 后台排版, 传图片等等操作, 还可以借助 &lt;code class=&quot;highlighter-rouge&quot;&gt;travis-ci&lt;/code&gt; 这样的工具, 写完文章后 &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt; 一下即可, &lt;strong&gt;CI&lt;/strong&gt; 负责自动 pull 代码, build 代码生成 html 并 deploy 到 github pages 等相应 server 上.  (github pages 本身也提供自动 build 等功能, 但其依赖的工具有限, 比如只能用有限的 jekyll 插件等, 而 &lt;code class=&quot;highlighter-rouge&quot;&gt;travis-ci&lt;/code&gt; 不一样, 差什么工具自己加一条命令安装一下即可.)&lt;/p&gt;

&lt;h3 id=&quot;hexo&quot;&gt;hexo&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/resources/blog-historys/hexo.tanglei.name.png&quot; alt=&quot;唐磊的 hexo 博客&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最近又看了一下之前折腾的 hexo 框架, 发现了一个不错的主题模板如上图所示, 正在考虑是否要迁移到 hexo 上呢. 其实之前 hexo环境就一直有, 只需要切换主题即可, 点击 &lt;a href=&quot;http://hexo.tanglei.name/&quot;&gt;hexo.tanglei.name&lt;/a&gt; 即可看到效果.&lt;/p&gt;

&lt;p&gt;因为之前用的 jekyll 那个模板总体感觉还行, 但我总体感觉不如hexo.tanglei.name 这个好看, 由于都是 markdown, 所以切换起来相对比较容易.&lt;/p&gt;

&lt;p&gt;其实现在这种静态博客系统的优点有了, 缺点也有, 比如一些动态的东西就需要依赖于第三方服务. 比如&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;留言系统: 用得较多的是 duoshuo 和 disqus, disqus 国内被墙, 多说貌似现在也处于半死状态, 没人维护了.&lt;/li&gt;
  &lt;li&gt;搜索: 简单的搜索可以借助 Google / Baidu 等搜索引擎, 通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;keywords site: www.tanglei.name&lt;/code&gt; 检索限制关键字来源在搜索引擎的系统里. 但如果搜索引擎没有收录完全等就搜不到了. 最近切换hexo主题还知道了有专门做搜索服务的公司 swiftype, 提交一个网站入口给 swiftype, swiftype 会抓取你整个网站, 然后做 index 等, 最后提供接口供搜索. (果然卖服务的公司越来越多)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/resources/blog-historys/hexo.tanglei.name-search.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;目前博客主题还没切换, 要不大家投个票, 看哪个风格更好看?&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Dec 2016 00:00:00 +0000</pubDate>
        <link>https://www.tanglei.name/blog/blog-history.html</link>
        <guid isPermaLink="true">https://www.tanglei.name/blog/blog-history.html</guid>
        
        <category>Blog</category>
        
        <category>经验技巧</category>
        
        <category>我做站长</category>
        
        
        <category>经验技巧</category>
        
      </item>
    
      <item>
        <title>从一道面试题谈谈一线码农应该具备的基本素质</title>
        <description>&lt;p&gt;&lt;img src=&quot;/resources/talking-about-the-basic-quality-for-frontline-coder-from-an-interview-problem/coder.jpg&quot; alt=&quot;一线码农&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;谈起这个题目也主要是自己作为面试官参与技术面试多多少少也有五六十次了(算上校招的话更多), 各种各样的人(有厉害的, 也有奇葩的)都遇到过, 虽然当面试官经验不是很多, 但这里也想谈谈自己的一些看法. 或许你有不同的意见或者觉得我的做法有不恰当的地方, 希望你可以指出或参与讨论.&lt;/p&gt;

&lt;p&gt;面试本来就是一个双向选择的过程, 面试官和候选人的地位本应该是一个平等的位置, 面试官希望通过简单的交流沟通可以对候选人的技术, 沟通等(可能主要是技术)有一定了解进而确定候选人是否匹配相应的职位.&lt;/p&gt;

&lt;p&gt;因为面试时间有限, 1个小时(一般情况)的时间很难去全面了解候选人的技术实力. 所以在面试过程中很难做到完全公平.&lt;/p&gt;

&lt;p&gt;举个简单的例子, 面试官出一道题目, 候选人 A 可能曾经做过或见过, 所以能够比较轻松地回答出这个问题, 而候选人 B 没有做过, 虽然不能答出让面试官满意的答案, 但 B 提供了一些解题的思路, 虽然最终并没有答出这道题目, 这就一定说明候选人 B 比 A 差么? 并不见得.&lt;/p&gt;

&lt;p&gt;额, 发现编不下去了, 直接上本文 title 里所指的题目吧, 这道题目是我经常出的一道面试题.&lt;/p&gt;

&lt;p&gt;(不过这个题目公布后, 以后面试&lt;strong&gt;可能&lt;/strong&gt;就得换题目了, 不过其实鉴于目前我公号/blog的阅读量可以直接忽略的 :(  )&lt;/p&gt;

&lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;

&lt;p&gt;实现一个函数, 完成 开根号 的操作, 方法签名如下.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;要求:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;不能调用系统库函数, 诸如 &lt;code class=&quot;highlighter-rouge&quot;&gt;Math.sqrt(v)&lt;/code&gt; 之类的;&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;假设计算出的结果为 &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt;, 要求满足如下条件 $&lt;/td&gt;
          &lt;td&gt;r - \sqrt v&lt;/td&gt;
          &lt;td&gt;\leq t $, 其中, $\sqrt v$ 是真实的值, &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; 为给定的一个误差, 例如&lt;code class=&quot;highlighter-rouge&quot;&gt;0.1&lt;/code&gt;等. 千万别被这个不等式吓住, 其实就是希望你计算出的答案 &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt; 要在给定的误差范围内. 举个例子, 我调用你的接口 &lt;code class=&quot;highlighter-rouge&quot;&gt;sqrt(9, 0.21)&lt;/code&gt; 返回值属于 &lt;code class=&quot;highlighter-rouge&quot;&gt;[2.79, 3.21]&lt;/code&gt; 这个区间的任意一个都满足条件. 因为 $\sqrt 9 = 3$,  对于任意的 $r \in [2.79, 3.21]$, 都满足 $&lt;/td&gt;
          &lt;td&gt;r - 3&lt;/td&gt;
          &lt;td&gt;\leq 0.21$.&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;实现语言不限, 你条件可以比上述&lt;strong&gt;更加苛刻, 但不能宽松&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;看到这里, 其实你可以 &lt;font color=&quot;red&quot;&gt;拿出笔和纸, 尝试解答一下&lt;/font&gt;, 强调一下, 一定要注意&lt;strong&gt;给定的误差条件&lt;/strong&gt;, 欢迎沟通交流. 其实, 这个题目就是 leetcode 上的一个原题 &lt;a href=&quot;https://leetcode.com/problems/sqrtx/&quot;&gt;sqrtx&lt;/a&gt; 稍加变化得到.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;
&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;解答中 ing&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/talking-about-the-basic-quality-for-frontline-coder-from-an-interview-problem/coding.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;
&lt;hr /&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;解答&quot;&gt;解答&lt;/h2&gt;

&lt;p&gt;其实刚开始, 我认为这道题目比较简单, 至少在给予提示后, 理想当中大部分一线的码农都可以给出实实在在 code 的.&lt;/p&gt;

&lt;p&gt;然后事实并非如此, 然而在面试很很多人之后, 发现此道题目并不简单. // 当然, 估计也是 candidate 的质量问题.&lt;/p&gt;

&lt;p&gt;其实, 我刚开始面试时还用一些二叉树相关如非递归遍历等题目的, 后来基本上没人能写出(社招)也就放弃了.&lt;/p&gt;

&lt;p&gt;当被问起这道题目之后, 假设一个候选人从完全没有思路到最后的 Code 环节可能会经历如下一个循序渐进的一个过程.&lt;/p&gt;

&lt;h3 id=&quot;直接放弃&quot;&gt;直接放弃&lt;/h3&gt;

&lt;p&gt;题目给出后, 我一般首先明确候选人弄清楚了题目的含义然后会给一两分钟让候选人先思考一下.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A: 你有什么思路吗?&lt;br /&gt;
B: 没有啊.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可能候选人内心OS是: “你出这样的题目是不是有病啊, 明明有 lib 函数可以直接用的”. 
(同组有小伙伴确实有遇到这样的候选人, 语言虽没这样夸张, 大意是: 实际工作中会出现这样的问题吗? 我直接给你百度一个就行了)&lt;/p&gt;

&lt;p&gt;也有候选人刚开始抱着那个约束误差范围的不等式研究 N 久, 然后就没有然后的. 刚开始看这个条件当然好, 但如果这个不等式没有思路可以先放一放, 没必要在那苦熬.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A: 这样吧, 如果我问题 根号10 等于多少, 你怎么回答. &lt;br /&gt;
B: 3.? 吧&lt;br /&gt;
A: 你怎么知道是3.几, 因为你知道9开根号是3, 想象一下, 你可以完全用程序帮忙模拟你大脑思考的过程. &lt;br /&gt;
B: ……&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其实是希望提醒候选人, 我们首先是要解题, 然后才考虑效率. 即不管用什么方法能够给出一个答案的. 这个时候候选人可能进入下一个阶段了.&lt;/p&gt;

&lt;h3 id=&quot;暴力搜索&quot;&gt;暴力搜索&lt;/h3&gt;

&lt;p&gt;实际面试过程中也有人是直接到这个阶段的.&lt;/p&gt;

&lt;p&gt;先用一个循环找到 $r$, 使得 $r^2$ 是离给定 v 最近的平方数, 即你希望算 $\sqrt {10}$, 先找到3, 因为$3^2=9$, 计算 $\sqrt {10011}$, 先找到 $100$.&lt;/p&gt;

&lt;p&gt;然后再用一个循环, 每次 $ r += t $, 直到 $r ^2 &amp;gt; v$ 为止.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A: 这个方法从理论上讲, 是一个可行的方案, 设想一下, 如果我的精度要求很高, 希望计算的 v 也很大, &lt;br /&gt;
如 &lt;code class=&quot;highlighter-rouge&quot;&gt;sqrt(v = 10000000, t = 0.000001)&lt;/code&gt; 之类的, 调用你这个方法效率是不是很低, 这个时候应该怎么优化? &lt;br /&gt;
B: 这样的话, 我这个方法效率确实比较低, 不过可以这样优化, 比如设置一个步长, 一次迭代后, 如果没有达到预期, 可以不断修改这个步长来增大逼近真实值的速度, 比如10倍误差, 100倍误差等.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其实, 在与候选人的不断交流中可以看出候选人在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Problem Solving&lt;/code&gt; 的能力, 例如关于上面问题的优化, 也可能用于在实际工作中遇到的问题.&lt;/p&gt;

&lt;p&gt;例如, 我们在实际工作中可能经常会写一些异步的回调通知接口等, 这个接口可能是其他团队维护的, 有可能由于网络问题等回调接口可能会失败进而需要重试, 对于重试的机制其实就可以借鉴上面的”步长”机制, 第一次回调失败, 我等待 1s 后重试, 失败再重试, 也许间隔 1s 不太恰当, 是否可以修改等待的步长, 等待比如 5s, 10s? 等等再重试直到成功. 为什么要这样做? 也许对方 server 本来现在就处于峰值, 你不停的重试不但没有增加你接口调用成功的机会, 反而增加对方 server 的负担.&lt;/p&gt;

&lt;p&gt;回到这个问题本身, 继续&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A: 恩, 这样做确实可以优化, 是不是稍微有些复杂, 你听说过二分搜索/折半查找吗? 可以借用一下这个思路. &lt;br /&gt;
B: 我想想…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;二分搜索&quot;&gt;二分搜索&lt;/h3&gt;

&lt;p&gt;当然, 部分候选人提示二分后, 就直接能够 get 到点, 并且能够写出二分大体框架, 但很有可能&lt;strong&gt;结束条件&lt;/strong&gt;写的不对.&lt;/p&gt;

&lt;p&gt;(当然, 部分人可能之间见到过类似的, 但很有可能精度要求不一样, 这个精度的设置也是为了考察候选人对一个新问题的理解能力, 以及防止刷过题的人直接”背”出答案. 不过, 如果候选人不是很能理解这种思路, 一般会让候选人先忽略这个精度问题. )&lt;/p&gt;

&lt;p&gt;如果候选人还没有思路, 就会继续&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A: 这样理解吧, 你刚刚的搜索整数部分的过程其实是线性的, 一个一个数去暴力穷举, 借助二分的意思就是, 比如算 根号10, 你搜索范围是, [0, 10] (其实除了几个数之外范围可以更小[0, v/2], 你能证明么?).&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;因为 &lt;script type=&quot;math/tex&quot;&gt;5^2 = 25 &gt; 10&lt;/script&gt;, 所以 &lt;script type=&quot;math/tex&quot;&gt;r \in [0, 5)&lt;/script&gt;&lt;/li&gt;
    &lt;li&gt;因为 &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
(5/2)^2 = 6.25 &lt; 10 %]]&gt;&lt;/script&gt;, 所以 &lt;script type=&quot;math/tex&quot;&gt;r \in (2.5, 5)&lt;/script&gt;&lt;/li&gt;
    &lt;li&gt;因为 &lt;script type=&quot;math/tex&quot;&gt;((2.5+5)/2) ^ 2 = 14.0625 &gt; 10&lt;/script&gt;, 所以 &lt;script type=&quot;math/tex&quot;&gt;r \in (2.5, 3.75)&lt;/script&gt;&lt;/li&gt;
    &lt;li&gt;继续, 如果你结束条件不太确定, 可以暂时不管…&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;我觉得我提示到这里, 已经很明显了.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A: 你现在明白了吗? &lt;br /&gt;
B: 明白了. &lt;br /&gt;
A: 那你写一下代码吧.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一个二分搜索, 算法都结合例子讲一遍了, 在候选人回答明白的情况下, 理想当中, 作为一线开发者写出来应该不成问题吧.&lt;/p&gt;

&lt;p&gt;然而…理想和现实还是有差距的. 
很多人都喜欢用递归写, 可是很多人递归里面的最重要的结束条件都木有, 一些边界条件等等都木有. 所以一般情况下, 代码写完后, 我会让候选人自己写测试用例.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A: 写好了是吧, 你写几个测试用例吧, 假设这个接口是别人写的, 你应该从哪几个角度去测试. &lt;br /&gt;
B: sqrt(-4, 0.21), 哎呀, 我这里忘了判断了, 改一下代码&lt;br /&gt;
B: sqrt(0, 0.21), sqrt(4, 0.21)… 还有问题, 再改改&lt;br /&gt;
A: ……&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;为什么要别人提示要测试用例, 才去 check 自己写的代码的正确性呢. 有的候选人写的代码, 就不拿一些异常情况去 check, 就用上面讲的 &lt;code class=&quot;highlighter-rouge&quot;&gt;sqrt(10, 0.21)&lt;/code&gt; 的例子都得不到预期结果.&lt;/p&gt;

&lt;p&gt;能够到达这一个步骤的人已经较少了, 如果你有较全测试用例和边界条件的判断, 再加上后面的结束条件能够正确, 基本上这道题目就算满意了.&lt;/p&gt;

&lt;p&gt;哪些边界条件可以考察呢? 除了常规的一些比如负数开根号等, 还可以比如有可能传入精度 &lt;code class=&quot;highlighter-rouge&quot;&gt;t=0&lt;/code&gt; 这样的 BT 的输入, 如果候选人代码没有排除这个可能就会导致 “无限循环” 下去(事实情况暂且不讨论), 这个时候再看看候选人的应变能力和思维方式.&lt;/p&gt;

&lt;h3 id=&quot;关于结束条件&quot;&gt;关于结束条件&lt;/h3&gt;

&lt;p&gt;本质上讲, 这个算法就是一个迭代逼近的过程, 用二分的思路后, 关键就在于什么时候结束. 题目中已经给了误差条件, 
$ |r - \sqrt v| \leq t $, 难点在于其中的 $ \sqrt v $ 不知道, 不太方便直接进行计算判断. 
不少人用一个另外的结束条件来进行了判断即: $ |r^2 - v| \leq t $, 其实这两个条件是不一样的, 这里就需要考察一下候选人是否正确区分并理解这两个条件.&lt;/p&gt;

&lt;p&gt;对于这个结束条件, 你有什么想法吗? 你能证明你的想法吗?&lt;/p&gt;

&lt;p&gt;面试的人多了, 感觉预期都有所下降了. 现在基本上如果能够把整个二分整体框架写出来, 还能分析个二分复杂度之类的, 一些基础还说得过去, 我这里也就算过了. 当然目前我司是3轮技术面过才能拿到 Offer.&lt;/p&gt;

&lt;h3 id=&quot;其他解法&quot;&gt;其他解法&lt;/h3&gt;

&lt;p&gt;当然本题还有一些其他的数学解法, 例如用牛顿迭代法, 梯度下降法(最速下降法), 泰勒公式展开等等.&lt;/p&gt;

&lt;p&gt;如果候选人能想到这些, 说明他还是有一定数学基础的, 如果愿意可以让他讲讲, 如果候选人能够井井有条的将牛顿迭代等讲清楚, 且能将代码实现, 那&lt;strong&gt;单从这道题目&lt;/strong&gt;本身来讲肯定是优秀的候选人了.&lt;/p&gt;

&lt;p&gt;对于这道题目, 你有什么比较好的思路吗? 欢迎讨论.&lt;/p&gt;

&lt;h3 id=&quot;常见问题&quot;&gt;常见问题&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;问&lt;/strong&gt;: 为什么题目中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; 的类型是 &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;? &lt;br /&gt;
答: 还真没有理由, &lt;code class=&quot;highlighter-rouge&quot;&gt;double&lt;/code&gt; 也无所谓, 可能仅仅是因为 leetcode 上原题计算的数是 &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; 吧.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;问&lt;/strong&gt;: 我能正确答对这道题目就一定能通过这次面试吗? &lt;br /&gt;
答: 强调一下, 面试中考察这样一个题目, 并不是仅仅考察这道题目本身, 不是说你将这道题做对了, 就能通过我们的面试, 反之, 也不是说你没做对这道题目就一定不能通过我们的面试. 我们通过这道题目为契机, 希望考察的是候选人在分析问题, 解决问题的能力, 在交流过程中所体现的逻辑推理和思维方式等, 当然也有最后实实在在的 code.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;问&lt;/strong&gt;: 这不是一道数学题目吗, 为什么程序员面试需要考察这样的数学问题?
答: 同上, 不是考察这道题目本身. 另外, 这也不是一道数学题目, 当然能用数学的方式解答. 候选人能用数学的方式解答也算正确.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;问&lt;/strong&gt;: 二分是这道题目的标准答案吗, 我能用其他解法吗? &lt;br /&gt;
 答: 同上, 题目没有标准答案, 就算你用最暴力的算法搜索出来也是正确的解法, 其他数学方法也对.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;问&lt;/strong&gt;: 这道题目这么简单, 牛顿迭代, 二分逼近分分钟秒掉, 是不是太简单了? &lt;br /&gt;
答: 欢迎来面试.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;问&lt;/strong&gt;: 这题目在说什么, 我搞了半天没看懂, 这太难了? &lt;br /&gt;
答: 如果看完整篇文章或跟面试官交流了那么久, 你还是根本不明白这到底再说一个什么问题, 那么我真心建议还是趁早转行吧.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;问&lt;/strong&gt;: 我在实际工作中根本就不会遇到这样的问题, 你问这个有什么用?&lt;br /&gt;
答: 同第2条答案, 如果还有疑问, 再见.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;问&lt;/strong&gt;: 你们公司还缺人么, 面试会考察哪些点? &lt;br /&gt;
答: 人一直缺的, 有兴趣或者有其他问题可以戳我邮箱, 邮箱地址: &lt;strong&gt;==gCl1mLpVGbn5WY0BUa&lt;/strong&gt; (地址没错, 就是这个), 面试考察可能会涉及: CS 基础/Coding/算法/解决问题/项目经验/系统设计/沟通团队协作等等.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;结语&quot;&gt;结语&lt;/h2&gt;

&lt;p&gt;本文题目是”从一道面试题谈谈一线码农应该具备的基本素质”, 其实, 上面大部分内容只谈到了这道题目, 中间也穿插了一些对这道题目的分析和理解. 
上述题目的场景是社招面试中的, 对于这样的题目来说校招的反馈会更好, 但我想说的是, 难道社招确实写不出来么? (了解了一下, 确实 candidate 的质量不一) 我其实想表达的是, 作为在最前线 coding 的码农, 在别人讲解了二分算法的条件下, 能写出这个二分算法难道不是一线码农应该具备的基本素质?&lt;/p&gt;

&lt;p&gt;一线码农难道不应该对一些基本的算法有所了解? 对常见的算法复杂度有所了解? 比如二分搜索复杂度为什么是 $\log_2 N$. 
很多人对算法复杂度的概念了解甚微, 面试前死记硬背, 但二分搜索的复杂度应该还是能推导出来吧, 没让推导快排啊(啊, 我自己貌似也忘记了快排复杂度的推导).&lt;/p&gt;

&lt;p&gt;之前有一个候选人, Java 开发七八年经验了, 问 &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayList, HashMap&lt;/code&gt; 怎么实现的都不知道. 
还有一个印象比较深, 在 XX 做搜索, 面试职位也是开发啊, 结果落实到代码就根本下不了笔. 
还有候选人写精通 Java, 结果连 GC 原理都不清楚, 还有什么熟练掌握 Vim, 结果连基本文本替换都不会, 有的会说精通 MySQL, 然而索引的原理也不清楚.&lt;/p&gt;

&lt;p&gt;本文题目貌似取的范围有点大, 本篇强调的主要还是 coding 能力, 不过对于一线开发者来讲, coding 能力难道不是最基本中的基本吗?&lt;/p&gt;

&lt;p&gt;可能感觉大部分程序员都被大量的需求压迫着, 被产品经理催促着, 仓促地码着繁琐的业务代码, 不断的改着 Bug, 又引入新的 Bug. 业务代码重要么, 当然重要, 但同时也还是希望我们不要抛弃一些基础的东西, 多培养一下我们的编程素养.&lt;/p&gt;

&lt;p&gt;全文完, 本人才疏学浅, 望各位看官轻拍.&lt;/p&gt;

&lt;p&gt;欢迎交流讨论, Blog 用的 Disqus 评论系统, 如果希望留言讨论的话, 可以找梯子, 或者扫描下面的二维码, 到我微信公众号参与讨论, 感谢.&lt;/p&gt;

&lt;p&gt;p.s 如果你觉得这文章对你有那么一点点收获, 请不要犹豫扫描下面二维码关注我的公众号, 如果你再能帮忙转发一下就更好了. 么么哒.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/wechat-tangleithu.jpg&quot; alt=&quot;tanglei 微信号&quot; /&gt;&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&gt;
 &lt;/script&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
MathJax.Hub.Config({
  tex2jax: {
    inlineMath: [['$','$'], ['\\(','\\)']],
    skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'],
    processEscapes: true
  }
});
 &lt;/script&gt;

</description>
        <pubDate>Sun, 18 Dec 2016 00:00:00 +0000</pubDate>
        <link>https://www.tanglei.name/blog/talking-about-the-basic-quality-for-frontline-coder-from-an-interview-problem.html</link>
        <guid isPermaLink="true">https://www.tanglei.name/blog/talking-about-the-basic-quality-for-frontline-coder-from-an-interview-problem.html</guid>
        
        <category>经验技巧</category>
        
        <category>面试</category>
        
        <category>程序员</category>
        
        
        <category>经验技巧</category>
        
      </item>
    
      <item>
        <title>腾讯云服务器, 域名备案及 CDN 服务体验</title>
        <description>&lt;p&gt;以下原因促使我要用腾讯云服务器以及将裸奔了6~7年的域名进行ICP备案:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/qcloud/wechat-encode-tanglei.name.jpg&quot; alt=&quot;非微信官方网页,继续访问将转换手机预览模式&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;刚开通的微信公众号, 积极性高涨, 然而每次微信里面跳转到我的 blog, 都会出现上图所示的跳转中间页. 默认继续访问还是看到微信转码后的效果, 影响用户体验. 我尝试申请恢复了几次没有效果. 申请页面提示备案域名可能性增大, 另外微信后台可以设置安全 JS 域, 域名也必须是通过备案的域名.&lt;/li&gt;
  &lt;li&gt;之前用的国外的 VPS, 陆陆续续写过几个工具, 前端时间朋友圈有个求助正好是我之前工具能够解决的. (这个工具是根据关键字自动去 Google scholar 将文章的 bibtex 信息导出, 方便写 paper ) 然而, 之前工具用 PHP 写的, 跑在 VPS 上, 由于后来我 &lt;a href=&quot;http://www.tanglei.me/blog/give-up-wordpress-to-jekyll.html&quot;&gt;彻底放弃了 wordpress&lt;/a&gt;, 直接用 github pages 提供的服务 host 我的 blog, 因此 此工具也不能 work 了. 之前的 VPS 很慢.&lt;/li&gt;
  &lt;li&gt;微信公众号后台的一些开发工具等也必须是通过备案的域名.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;另外, 程序猿有个自己稳定的网络开发环境(程序猿开发不都是 copy from stackoverflow/Google 么, 哈哈 🙃)也是极好的. 所以最终决定购买了腾讯云服务器, 另外还赠送了半年的 CDN 服务, 这对于加快我那个无人问津(最近还是平均有个4~500 PV)的 Blog 也是极好的.&lt;/p&gt;

&lt;p&gt;于是就购买了~  CPU 1核, 1G Mem, 1Mbps, 20G 硬盘, 这个最低端的配置. 
搭载了CentOS 7系统.&lt;/p&gt;

&lt;p&gt;服务器到手后, 首先就是环境配置. 先搞个 LAMP 环境吧, 有两个方法比较快.&lt;/p&gt;

&lt;h2 id=&quot;云服务器环境&quot;&gt;云服务器环境&lt;/h2&gt;

&lt;h3 id=&quot;一键安装工具&quot;&gt;一键安装工具&lt;/h3&gt;

&lt;p&gt;类似之前搭建清华笛协(THUFlute)环境用过的XAMPP. Linux 下也有类似的. 可参考&lt;a href=&quot;http://bbs.qcloud.com/thread-8480-1-1.html&quot;&gt;Linux服务器一键安装LAMP/LNMP/LANMP环境 &lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget http://mirrors.linuxeye.com/oneinstack-full.tar.gz  
tar -xvf oneinstack-full.tar.gz
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;oneinstack &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./install.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;不一会就安装了 &lt;em&gt;Nginx,Apache,Mysql,PHP&lt;/em&gt; 环境,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/qcloud/qcloud-lamp-oneinstack.jpg&quot; alt=&quot;qcloud-lamp-oneinstack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注意, 云服务器初始化好之后, 要配置安全策略, 对外开放的端口等.&lt;/p&gt;

&lt;h3 id=&quot;docker&quot;&gt;Docker&lt;/h3&gt;

&lt;p&gt;Docker 这么火, 也应该凑凑热闹. 安装好 docker 环境后, 搜索一下镜像.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@VM_3_4_centos ~]# docker search lamp
NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
reinblau/lamp                     Dockerfile &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;PHP-Projects with MySql client   25                   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OK]
nickistre/ubuntu-lamp             LAMP server on Ubuntu                           12                   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OK]
greyltc/lamp                      a super secure, up-to-date and lightweight...   10                   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OK]
nickistre/centos-lamp             LAMP on centos setup                            8                    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OK]
nickistre/ubuntu-lamp-wordpress   LAMP on Ubuntu with wp-cli installed            7                    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OK]
nickistre/centos-lamp-wordpress   LAMP on CentOS setups with wp-cli installed     3                    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OK]
nickistre/centos-lamp-xdebug      LAMP on centos with xDebug                      2                    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OK]
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;看名字有 wordpress 就直接 pull, 并安装. &lt;code class=&quot;highlighter-rouge&quot;&gt;docker pull nickistre/centos-lamp-wordpress&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@VM_3_4_centos ~]# docker images
REPOSITORY                        TAG                 IMAGE ID            CREATED             SIZE
hello-world                       latest              c54a2cc56cbb        5 months ago        1.848 kB
nickistre/centos-lamp-wordpress   latest              14331568cd2f        6 months ago        547.4 MB
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run -d -p 1024:80 nickistre/centos-lamp-wordpress&lt;/code&gt; 然后 &lt;code class=&quot;highlighter-rouge&quot;&gt;curl localhost:1024 &lt;/code&gt; check 一下能够 work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/qcloud/docker-lamp-wordpress.png&quot; alt=&quot;qcloud-docker-lamp-wordpress&quot; /&gt;&lt;/p&gt;

&lt;p&gt;事后才发现, 上面的那个环境果然仅仅是一个 wp-client, 并不是我想要的 wordpress, 不过另外再下一个 wordpress 源码包就可以了.&lt;/p&gt;

&lt;p&gt;对, 目前这台主机上就跑了一个 wordpress, 博主不是我, 是自称北邮最美女博士, 站点是 &lt;a href=&quot;http://www.dr-sun.cn/&quot;&gt;论如何get博士成就 – 北邮不会码代码的博士生中最不会码代码的博士生的博士生活&lt;/a&gt;, 网址是 &lt;a href=&quot;http://www.dr-sun.cn&quot;&gt;dr-sun.cn&lt;/a&gt;, 没错, 就是 孙博士, 欢迎大家关注.&lt;/p&gt;

&lt;p&gt;其实, docker 官网就有相应的 &lt;a href=&quot;https://hub.docker.com/_/wordpress/&quot;&gt;wordpress 镜像&lt;/a&gt;, 可以直接拉取, 或者直接从 &lt;a href=&quot;https://github.com/CentOS/CentOS-Dockerfiles/tree/master/wordpress/centos7&quot;&gt;CentOS github&lt;/a&gt;拉去也行.&lt;/p&gt;

&lt;p&gt;docker 其实, 我并不太会, 只是之前从白老板, 胖子那里学了两招而已. 如果你要采用基于 Docker 的方案可以参考这篇文章&lt;a href=&quot;https://linux.cn/article-5560-1.html&quot;&gt;如何在 Docker 容器中架设一个完整的 WordPress 站点&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;说到这里, 可以来一发广告. 我们部门(宜信大数据创新中心)有个团队在&lt;strong&gt;@洪教授(洪强宁)&lt;/strong&gt; 的带领下开发了一套&lt;strong&gt;基于 docker 的 PaaS 系统&lt;/strong&gt; – Lain, 早已经开源啦, &lt;a href=&quot;https://github.com/laincloud/lain&quot;&gt;Github 地址&lt;/a&gt;, &lt;strong&gt;Lain&lt;/strong&gt; 是一个其面向技术栈多样寻求高效运维方案的高速发展中的组织，devops 人力缺乏的 startup ，个人开发者。统一高效的开发工作流，降低应用运维复杂度；在 IaaS / 私有 IDC 裸机的基础上直接提供应用开发，集成，部署，运维的一揽子解决方案。&lt;/p&gt;

&lt;h2 id=&quot;域名备案及-cdn&quot;&gt;域名备案及 CDN&lt;/h2&gt;

&lt;p&gt;提起域名备案还是有心理阴影的, 回想本科的时候有过的第一个域名(i3zhai.com, 爱山寨, 求别笑这个域名, 现在已经不属于我了), 花了近2个月时间去工信部申请 ICP 备案, 最后还拒了. 以至于后来的五六年里都没曾想过再去申请备案.&lt;/p&gt;

&lt;p&gt;结果这次通过腾讯云去申请备案, 没想到还刚过一周还就给通过了, 果然还是要找个强有力的后盾(代理商)去办事才行啊. 
由于备案期间要求网站要关闭, 我就没用我正在用的域名 tanglei.name 去申请备案, 而是通过 tanglei.me 去申请的. 
备案限制还蛮多的, 比如你是北京身份证, 只能备案一些常见的后缀如&lt;code class=&quot;highlighter-rouge&quot;&gt;.com/.cn/&lt;/code&gt; 之类的, 有的省市限制了域名注册代理商只能是国内的等等. 还是很 DT 的. 反正, 最后通过曲曲折折的方法最后备下来了.&lt;/p&gt;

&lt;p&gt;对了, 腾讯提供的 CDN 服务也只支持给已经备案的域名使用.&lt;/p&gt;

&lt;p&gt;先看一下 CDN 大概怎么配置和使用吧, 原理就是你添加一个域名的 CNAME, 指向腾讯的 host, 所以用户发起请求的时候实际是解析到腾讯的 CDN 服务器的, CDN 后台配置一个源站点, 如 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.tanglei.name&lt;/code&gt;, 用户请求到 CDN 服务器时, 如果没有命中, 就去源站点请求并将内容缓存至 CDN 服务器.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/qcloud/www.tanglei.me-cdn-config.png&quot; alt=&quot;腾讯云 CDN 配置&quot; /&gt;&lt;/p&gt;

&lt;p&gt;配置后约几分钟生效, &lt;code class=&quot;highlighter-rouge&quot;&gt;ping&lt;/code&gt; 一下发现已经生效了, &lt;code class=&quot;highlighter-rouge&quot;&gt;931.tc.sp.cdntip.com&lt;/code&gt; 就是腾讯对应的 CDN 节点, 不同地方 ping 这个节点对应的实际 IP 地址也可能不一致.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  ~ ping www.tanglei.me
PING 931.tc.sp.cdntip.com (123.125.46.43): 56 data bytes
64 bytes from 123.125.46.43: icmp_seq=0 ttl=44 time=7.089 ms
64 bytes from 123.125.46.43: icmp_seq=1 ttl=44 time=6.863 ms
64 bytes from 123.125.46.43: icmp_seq=2 ttl=44 time=9.846 ms
^C
--- 931.tc.sp.cdntip.com ping statistics ---
3 packets transmitted, 3 packets received, 0.0% packet loss
round-trip min/avg/max/stddev = 6.863/7.933/9.846/1.356 ms
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/resources/qcloud/www.tanglei.me-ping-cdn.png&quot; alt=&quot;腾讯云 CDN 配置效果&quot; /&gt;&lt;/p&gt;

&lt;p&gt;能看到 CDN 已经生效了, 再找个工具看下各地的延时情况. &lt;a href=&quot;http://ping.chinaz.com/www.tanglei.me&quot;&gt;ping.chinaz.com&lt;/a&gt;, 一片绿啊, 各个地方线路 ping 到的 IP 已经不一样了. 极大提高了速度, * 32倍都不止啊.&lt;/p&gt;

&lt;p&gt;目前我仍然用 github host 我的blog文件, 需要在 CDN 设置里将 host 设置为回源host 设置为 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.tanglei.name&lt;/code&gt;, 如果不设置, 请求 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.tanglei.me &lt;/code&gt;会到 github pages 拉页面, github pages 里面不认 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.tanglei.me&lt;/code&gt; 这个 host, 就会出现 404.&lt;/p&gt;

&lt;p&gt;回源 host 配置成 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.tanglei.name&lt;/code&gt;, 会直接去 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.tanglei.name&lt;/code&gt; 这里去拉文件进行缓存, 现在就 OK 了.&lt;/p&gt;

&lt;p&gt;现在直接请求 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.tanglei.name&lt;/code&gt; 会取 github pages 的文件, 通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.tanglei.me&lt;/code&gt; 取会走腾讯云的 CDN, 来个对比结果. 
前面说的提升32倍稍微有些夸张, 提升个五六倍还是正常的. 对比的是 &lt;a href=&quot;http://www.tanglei.me/blog/app-in-mac-for-common.html&quot;&gt;这个含有一些图片的页面&lt;/a&gt;, 测速还有一些如 USA的节点, 还拉低了平均值, 国外的一些节点还是走 github 更快.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/qcloud/tanglei.name-vs-tanglei.me-cdn-.png&quot; alt=&quot;腾讯云CDN 对比效果&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接入 CDN 后台看到的差不多1天后的效果, 没骗你吧, 一天也就400~500 PV.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/qcloud/qcloud-cdn-status.png&quot; alt=&quot;腾讯云CDN 对比效果&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;todo&quot;&gt;TODO&lt;/h2&gt;

&lt;p&gt;现在是两个域名生效, 下一步得做一个301跳转, 不然两个站内容一样, 在 SEO 肯定不友好, 还拉低两个站的权重. 貌似用 github 直接 host 还不太好做, 所以准备自己 host.&lt;/p&gt;

&lt;p&gt;计划仍然通过 &lt;a href=&quot;http://travis-ci.org/&quot;&gt;travis-ci&lt;/a&gt;, 直接 &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit &lt;/code&gt; &lt;em&gt;.md&lt;/em&gt; 文件后, CI 负责帮忙自动从 github 中 pull 代码进行 build 并部署到腾讯云, 进而更新站点. &lt;strong&gt;travis-ci&lt;/strong&gt; 这个工具, 程序猿也应该了解下.&lt;/p&gt;

&lt;p&gt;后续还可以做的就是全站 HTTPS 的支持, 虽然对于本 blog 来说并没有什么卵用, 然而我就想试试, 哈哈哈哈. 其实还是有用的, 比如有利于 SEO, 然后自己也可以练练手.&lt;/p&gt;

&lt;p&gt;对了, Last but not the least,  如果你还是&lt;strong&gt;在校学生&lt;/strong&gt;的话, 去腾讯云有惊喜哦~ 看到这个消息的并受益的同学别忘了回来分享, 并给我点赞.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;p.s 如果你觉得这文章对你有那么一点点收获, 请不要犹豫扫描下面二维码关注我的公众号, 如果你再能帮忙转发一下就更好了. 么么哒.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/wechat-tangleithu.jpg&quot; alt=&quot;tanglei 微信号&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Dec 2016 00:00:00 +0000</pubDate>
        <link>https://www.tanglei.name/blog/try-qcloud-vm-cdn.html</link>
        <guid isPermaLink="true">https://www.tanglei.name/blog/try-qcloud-vm-cdn.html</guid>
        
        <category>经验技巧</category>
        
        <category>云服务</category>
        
        <category>Linux</category>
        
        
        <category>经验技巧</category>
        
      </item>
    
      <item>
        <title>Mac 软件推荐(续)之程序猿篇</title>
        <description>&lt;p&gt;在前面一篇文章&lt;a href=&quot;http://www.tanglei.name/blog/app-in-mac-for-common.html&quot;&gt;“Mac 软件推荐续(!程序猿篇)”&lt;/a&gt; (文章取名装X失败, 悲伤)中, 我已经介绍了一些大众化的软件, 当然作为程序猿的你也应该参考参考. 
本篇文章将介绍一些可以提高程序猿工作效率的一些软件和工具及相关配置.&lt;/p&gt;

&lt;h2 id=&quot;mac-built-in&quot;&gt;Mac built-in&lt;/h2&gt;

&lt;p&gt;首先介绍的就是我觉得应该熟悉 Mac 内置的一些软件及配置.&lt;/p&gt;

&lt;h3 id=&quot;trackpad-配置&quot;&gt;trackpad 配置&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;启用 Tap to click&lt;/strong&gt;: 在 &lt;code class=&quot;highlighter-rouge&quot;&gt;System Preferences -&amp;gt; Trackpad &lt;/code&gt; 中启用, 用 &lt;strong&gt;tap&lt;/strong&gt; 替换 &lt;strong&gt;click&lt;/strong&gt; 的操作, 明明轻轻 &lt;strong&gt;tap&lt;/strong&gt; 就可以完成的, 为何还要用力点击才 OK. 现在偶尔用其他人电脑非得用力 click 就太纠结了.
同时, 还有 “右键”功能, &lt;strong&gt;Secondary click&lt;/strong&gt;, 用两个手指 tap 弹出右键菜单. 
&lt;img src=&quot;/resources/app-in-mac/mac-os-trackpad.png&quot; alt=&quot;mac trackpad 设置&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;开启单词选词查询&lt;/strong&gt;:
选中某个中英文单词后, 三指 tab 会弹出词典释义. 这个在&lt;a href=&quot;http://www.tanglei.name/blog/app-in-mac-preface.html&quot;&gt;之前一篇文章&lt;/a&gt;中也有介绍.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Scroll 方向&lt;/strong&gt;: 这个道是自己习惯就好. 由于我刚开始从 Win 转向 Mac 的时候习惯用 Win 的那种方式, 于是就没有开启 &lt;em&gt;Scroll direction: natural&lt;/em&gt;, 然后也一直沿用至今.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;其他手势&lt;/strong&gt;: 有必要熟悉一下, 比如知道在 Win 环境下用 &lt;code class=&quot;highlighter-rouge&quot;&gt;win+d&lt;/code&gt; 可以显示桌面, 相应的功能在 Mac 下如何做.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;快捷键&quot;&gt;快捷键&lt;/h3&gt;

&lt;p&gt;作为程序猿, 肯定离不开各种快捷键. 对于 Mac 内置的一些快捷键, 我们还是很有必要知道的.  基本的复制/粘贴就不说了, 常用的还有&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;空格键: 预览
cmd + ,: 设置
cmd + -/=: 缩小/放大
ctrl + u: 删除到行首(与zsh冲突, zsh中是删除整行)
ctrl + k: 删除到行尾
ctrl + p/n: 上/下移动一行或者前/后一个命令
ctrl + b/f: 光标前/后移char
esc + b/f: 光标前/后移word(蛋疼不能连续work)
ctrl + a/e: 到行首/行尾
ctrl + h/d: 删前/后字符
ctrl + y: 粘贴
ctrl + w: 删除前一个单词
esc + d: 删后一个单词
ctrl + _: undo
ctrl + r: bck-i-search/reverse-i-search, 输入关键字搜索历史命令
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面的这些快捷键特别是在敲命令时还是很有用的(可能有的确实是在命令行中才生效), 特别是结合 zsh 自动补全等功能. 比较 DT 的是就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;esc&lt;/code&gt; 一起用的时候, 不能连续使用. 举个例子, terminal 中输入了 &lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin source&lt;/code&gt;, 光标在末尾, 这时按住&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl&lt;/code&gt; 不放, 按一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt; 即向前删除一个单词, 第一次按 &lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt; 删除 &lt;em&gt;source&lt;/em&gt;, 再按 &lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt; 删除 &lt;em&gt;origin&lt;/em&gt;. 而 &lt;code class=&quot;highlighter-rouge&quot;&gt;esc + d&lt;/code&gt; 不能这样结合使用(如下 gif连续按就不 work), &lt;code class=&quot;highlighter-rouge&quot;&gt;esc&lt;/code&gt; 必须中途释放再按才能 work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/app-in-mac/builtin-quick-key-git-push.gif&quot; alt=&quot;bash自动补全&quot; /&gt;&lt;/p&gt;

&lt;p&gt;啥? 你说上面快捷键 &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl + w&lt;/code&gt; 等不太好按? 按键特别别扭? 
你需要做的就是将 &lt;code class=&quot;highlighter-rouge&quot;&gt;caps lock&lt;/code&gt; 映射为 &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Keyboard -&amp;gt; Modifier Keys &lt;/code&gt;修改, 目前我笔记本上的 &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl&lt;/code&gt; 键无效. 不过, 一般情况下我用我的 HHKB, 这种映射方式正好符合 HHKB 的布局. (其实我是在买 HHKB 之前就修改的这个映射)&lt;/p&gt;

&lt;p&gt;另外, 借助之前介绍的&lt;strong&gt;Karabiner&lt;/strong&gt;, 可以将一些常用的方向键(上下左右)重新映射一下, 比如我目前是 &lt;code class=&quot;highlighter-rouge&quot;&gt;s + h/j/k/l&lt;/code&gt; 来表示方向, 手不用太移动就能直接按方向(HHKB 本身按方向太麻烦, Mac 内置键盘有方向键还需要大幅度移动手), 用起来方便多了.&lt;/p&gt;

&lt;p&gt;Mac 内置的更多的快捷键列表可以参考 &lt;a href=&quot;https://support.apple.com/zh-cn/HT201236&quot;&gt;Mac 官网&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;其他还有一些常用的软件的快捷键, 可以用之前介绍的软件 cheetsheet, 长按 &lt;strong&gt;cmd&lt;/strong&gt;, 可弹出当前 active 的软件的快捷键.&lt;/p&gt;

&lt;h3 id=&quot;截图&quot;&gt;截图&lt;/h3&gt;

&lt;p&gt;这个从快捷键中单独列出来了, 就强调下这个功能.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd + shift + 3&lt;/code&gt; 截取整个屏幕. 
&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd + shift + 4&lt;/code&gt; 部分窗口, 出现十字供选取, 若此时按&lt;strong&gt;空格键&lt;/strong&gt;(这个技能得点赞), 会选取当前应用的窗口, 再 &lt;strong&gt;tap&lt;/strong&gt; 即可完成截图.&lt;/p&gt;

&lt;p&gt;上面快捷键是截图后以文件形式保存在桌面(默认是桌面, 当然你也可以自己修改保存位置), 再上面快捷键基础上再同时按 &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl&lt;/code&gt; 就会把图片保存在内存/剪贴板中, 直接去相应窗口粘贴即可.&lt;/p&gt;

&lt;h2 id=&quot;home-brew&quot;&gt;home brew&lt;/h2&gt;

&lt;p&gt;类似 centos 的 &lt;strong&gt;yum&lt;/strong&gt;, ubuntu 的 &lt;strong&gt;apt-get&lt;/strong&gt;, 能够方便管理安装软件包. 
Mac 上类似的应用还有&lt;strong&gt;port&lt;/strong&gt;, 我刚开始试用过 port, 貌似 brew 上的源会多一些. 
brew-cask 是 brew 的一个加强版, 可以安装一些桌面应用, 例如 chrome 等等之类的.&lt;/p&gt;

&lt;p&gt;这里就不多介绍了, 详情可以到官网查看. 
&lt;a href=&quot;http://brew.sh/&quot;&gt;brew&lt;/a&gt;
&lt;a href=&quot;https://caskroom.github.io/&quot;&gt;brew-cask&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;iterm2&quot;&gt;iTerm2&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.iterm2.com/features.html&quot;&gt;iTerm2官网&lt;/a&gt;有介绍功能. 以下是觉得可能常用的功能.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;分屏功能&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd + d&lt;/code&gt; 竖着分屏, &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd + shift + d&lt;/code&gt; 横着分屏&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd + t&lt;/code&gt; 新建一个 tab, &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd + num&lt;/code&gt; 切换到第 num 个 tab&lt;/li&gt;
      &lt;li&gt;当前窗口含有分屏时, 通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd + [&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd + ]&lt;/code&gt; 来进行切换小的分屏&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;热键&lt;/strong&gt; 设置一个热键, 比如我的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;alt + 空格&lt;/code&gt;, 弹出 iTerm2, 且以半透明的方式显示在当前 active 的窗口上面.
&lt;img src=&quot;/resources/app-in-mac/iterm2-hotkey.png&quot; alt=&quot;iTerm2 hotkey&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;搜索
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd + f&lt;/code&gt;搜索输入关键字后, 匹配的会黄色高亮, 此时按 &lt;code class=&quot;highlighter-rouge&quot;&gt;tab&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;shift + tab&lt;/code&gt; 会自动向后/前以word 的方式选中高亮的, 并自动 copy 到剪切板.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd + alt + e&lt;/code&gt;, 在所有的 tab 中全局搜索, 搜索出候选项后, 再选着你想要进入的 tab.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/resources/app-in-mac/iterm2-search-all.png&quot; alt=&quot;iTerm2 search&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;其他
    &lt;ul&gt;
      &lt;li&gt;新版本的 iTerm2 还支持直接在控制台里 ls 图片文件(图片显示在控制台里).(如上图下半部分, 连 gif 都支持)&lt;/li&gt;
      &lt;li&gt;自动识别控制台里的内容, 如含有链接或者本地文件路径可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd&lt;/code&gt; 加点击的方式直接打开链接或者文件(如下图上半部分). 这个功能很重要呢, 比如在编译过程中, 出现了 warning 或者 error, 一般会打印出具体文件路径, 此时直接从控制台就能打开文件进行 fix 了.&lt;/li&gt;
      &lt;li&gt;自动补全, iTerm2 本身是支持自动补全的(&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd + ;&lt;/code&gt;), 不过建议直接结合后面的zsh使用. &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd + shift + h&lt;/code&gt; 剪贴板历史(下图最后一行).&lt;/li&gt;
      &lt;li&gt;一些高级的功能目前可能处于测试版本, 你若用的稳定版是不支持的, 需要到官网下测试版. 还有更多的功能请到 iTerm2 官网探索吧.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/resources/app-in-mac/iterm2-imgcat-show-history.png&quot; alt=&quot;iTerm2 imgcat&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;zsh&quot;&gt;zsh&lt;/h2&gt;

&lt;p&gt;这个墙裂推荐啊. 结合 &lt;a href=&quot;http://ohmyz.sh/&quot;&gt;oh my zsh&lt;/a&gt;, 丰富的&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview&quot;&gt;插件资源&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;语法高亮, 自动补全等特别好, 在此推荐的几个插件或功能.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;git&lt;/strong&gt;: 当前目录若是在一个 git repo 下面的话, 会自动显示当前的分支信息等等. 然后可以自己搞一些 alias, 简写命令, 比如我常用的一些.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alias gs='git status'
alias gb='git branch -va'
alias gco='git checkout'
alias ga='git add'
alias gc='git commit -m'
alias gp='git push'
alias gfom='git fetch origin master'
alias gfod='git fetch origin develop'
alias grod='git rebase origin/develop'
alias grom='git rebase origin/master'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;autojump&lt;/strong&gt;: 这个也炒鸡赞. 会自动记录你 &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; 过的目录, 下次你直接 &lt;code class=&quot;highlighter-rouge&quot;&gt;j keyword&lt;/code&gt; 就会自动 &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; 到以 &lt;em&gt;keyword&lt;/em&gt; 匹配的目录. 输入 &lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt; 会展示当前会话访问过的目录, 然后对应目录有标号, 接下来按标号即可跳转.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;osx&lt;/strong&gt;: 举个最简单的例子, 比如你现在正在 finder 中浏览一个很深的目录, 现在突然想 cd 到这个目录去做一些命令操作. 如果你用xtrafinder 这样的软件的话道有这样的功能, 如果配上这个插件, 你直接输入 &lt;code class=&quot;highlighter-rouge&quot;&gt;cdf&lt;/code&gt; (cd finder)就自动 &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; 到 finder 打开的目录下.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;zsh-autosuggestions&lt;/strong&gt;, 如下图所示, 我在 &lt;em&gt;app-in-mac&lt;/em&gt; 这个目录下, 刚输入了 &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt;, 此时光标还在 &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; 前面, zsh 就已经自动给我补全了 &lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin source&lt;/code&gt;, 此时我只要按 &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl + e&lt;/code&gt; 跳转到行尾(所以熟悉上文中的快捷键很有必要啊), 回车即可执行命令了.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/resources/app-in-mac/zsh-plugins.png&quot; alt=&quot;iTerm2 zsh plugins&quot; /&gt;&lt;/p&gt;

&lt;p&gt;更多的, 还是请到官网查看.&lt;/p&gt;

&lt;h2 id=&quot;sublime-text&quot;&gt;sublime text&lt;/h2&gt;

&lt;p&gt;文本编辑器, 也有丰富的插件支持, 直接&lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;官网&lt;/a&gt;看吧. 这个 App, 我用得也不是很多.&lt;/p&gt;

&lt;p&gt;这里分享一个小的功能, 怎么在命令行用 sublime 打开特定的文件. 其实就是添加一个软链即可. (直接 &lt;code class=&quot;highlighter-rouge&quot;&gt;open filename&lt;/code&gt; 会以文件默认关键的软件打开)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  app-in-mac git:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ✗ subl dungeon-game.cpp
➜  app-in-mac git:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ✗ which subl
/usr/local/bin/subl
➜  app-in-mac git:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ✗ ls -la /usr/local/bin/subl
lrwxr-xr-x  1 tanglei  admin  62  1 24  2016 /usr/local/bin/subl -&amp;gt; /Applications/Sublime Text.app/Contents/SharedSupport/bin/subl
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;vim&quot;&gt;Vim&lt;/h2&gt;

&lt;p&gt;介绍 Vim 的文章也很多了. 这里就不详细展开了. 分享下我用的部分插件. (最近被 IntelliJ IDEA 搞得恶心了, 准备尝试抛弃), 
为了让多台电脑同步我的 vim 配置/插件等, 我直接放 github 了(&lt;a href=&quot;https://github.com/tl3shi/vimconfigs.git&quot;&gt;ref vimconfigs&lt;/a&gt;), 不同电脑只需要再建一个软链到github 中的 vimrc 即可.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/app-in-mac/vim-autocomplete.png&quot; alt=&quot;vim 自动补全&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Vundle/Pathogen: 插件管理, 我用的Pathogen, 直接将下面 github repo clone 到 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vim/bundle/&lt;/code&gt; 目录下即可&lt;/li&gt;
  &lt;li&gt;NERDTree: 文件目录树&lt;a href=&quot;https://github.com/scrooloose/nerdtree.git&quot;&gt;nerdtree github src&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;YouCompleteMe: &lt;a href=&quot;https://github.com/Valloric/YouCompleteMe&quot;&gt;YouCompleteMe github src&lt;/a&gt; 自动补全, 对C系列, 结合其他的可支持 Java/Python/Js 等,  跪求 Scala 支持&lt;/li&gt;
  &lt;li&gt;ctrlp.vim: &lt;a href=&quot;https://github.com/ctrlpvim/ctrlp.vim&quot;&gt;快速搜索文件&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;minibufexpl.vim: 会把最近打开的文件列出来方便跳转, &lt;a href=&quot;https://github.com/fholgado/minibufexpl.vim.git&quot;&gt;github src&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;conque-term: shell 跑在 vim 里面, &lt;a href=&quot;https://github.com/tl3shi/conque-term.git&quot;&gt;github src&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;ag: 代码搜索, 可结合 ctrlp.vim, 如果后者搜索太慢的话, &lt;a href=&quot;https://github.com/rking/ag.vim.git&quot;&gt;github src&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;tagbar/taglist: 标签, 能显示类结构信息等, &lt;a href=&quot;https://github.com/majutsushi/tagbar.git&quot;&gt;tagbar github src&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;vim-surround:  处理诸如&lt;code class=&quot;highlighter-rouge&quot;&gt;(), &quot;&quot;, []&lt;/code&gt; 等配对信息, &lt;a href=&quot;https://github.com/tpope/vim-surround.git&quot;&gt;github src&lt;/a&gt;, &lt;a href=&quot;http://zuyunfei.com/2013/04/17/killer-plugin-of-vim-surround/&quot;&gt;ref&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;vim-easymotion: 快速跳转, 关键字后会给匹配到的标记, 再选标记并跳转(类似后文介绍 Chrome 插件的Vimium中的链接标记并跳转功能:按键 &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; 会将本文所有链接突出显示并用字母标记, 然后按相应的字母则会新开标签页打开). &lt;a href=&quot;https://github.com/easymotion/vim-easymotion.git&quot;&gt;github src&lt;/a&gt;, &lt;a href=&quot;http://www.wklken.me/posts/2015/06/07/vim-plugin-easymotion.html&quot;&gt;ref&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;vim-powerline: 增强状态栏 &lt;a href=&quot;https://github.com/Lokaltog/vim-powerline.git&quot;&gt;github src&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;vim-indent-guides: 缩进可视化, &lt;a href=&quot;https://github.com/nathanaelkane/vim-indent-guides&quot;&gt;github src&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体效果等配置方法可以参考下面的两篇文章, 插件具体用法可阅读具体插件的 doc.&lt;/p&gt;

&lt;p&gt;Reference&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://yuez.me/jiang-ni-de-vim-da-zao-cheng-qing-qiao-qiang-da-de-ide/&quot;&gt;将你的Vim 打造成轻巧强大的IDE&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/yangyangwithgnu/use_vim_as_ide&quot;&gt;所需即所获：像 IDE 一样使用 vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dash&quot;&gt;Dash&lt;/h2&gt;

&lt;p&gt;其实介绍&lt;a href=&quot;http://www.tanglei.name/blog/app-in-mac-preface.html&quot;&gt;前文&lt;/a&gt; 介绍 Alfred 已经提到过, 这里再介绍一下. 程序猿应该必备啊. 内置各种语言, 各种环境的各种文档. 该 App 还提供各种 API 供其他工具交互使用. 例如 Vim(不是想象当中自动补全功能, 只是能够快捷地搜索 API), Sublime 等.  (p.s 要是有人写了一个 Vim 插件, 能够支持调用 dash 的 API(如果有的话) 自动补全代码, 那应该会很受欢迎的)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/app-in-mac/dash-main.png&quot; alt=&quot;dash&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;其他app&quot;&gt;其他App&lt;/h2&gt;

&lt;h3 id=&quot;chrome&quot;&gt;chrome&lt;/h3&gt;

&lt;p&gt;插件&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AdBlock: 广告屏蔽;&lt;/li&gt;
  &lt;li&gt;EditThisCookie: 修改 cookie;&lt;/li&gt;
  &lt;li&gt;Evernote Web Clipper: 印象笔记;&lt;/li&gt;
  &lt;li&gt;JSONView and JSONLint for Google Chrome™: 请求返回的json进行beautify方便查看;&lt;/li&gt;
  &lt;li&gt;Markdown Here: 在富文本输入markdown, 渲染成 html;&lt;/li&gt;
  &lt;li&gt;Markdown Preview Plus: 渲染 &lt;strong&gt;.md&lt;/strong&gt; 文件, 相当于 preview markdown;&lt;/li&gt;
  &lt;li&gt;Open Screenshot: 网页截图, 能够自动下拉截长图;&lt;/li&gt;
  &lt;li&gt;Postman: 请求伪造/抓包等, 也可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;Proxy SwitchySharp: proxy 切换;&lt;/li&gt;
  &lt;li&gt;RescueTime: &lt;a href=&quot;www.tanglei.name/blog/app-in-mac-for-common.html&quot;&gt;前文有介绍的RescueTime&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;undirect: google/baidu 搜索结果, 点击直达网站, 这个貌似不太好用了. 征求替代品;&lt;/li&gt;
  &lt;li&gt;Vimium: 操作 vim 一样操作浏览器, 移动查找等功能, 还有前文提到的快速标记链接并跳转;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;charles&quot;&gt;Charles&lt;/h3&gt;

&lt;p&gt;类 Windows 下 Fiddler 抓包应用.&lt;/p&gt;

&lt;p&gt;相关命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;tcpdump&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;其他有用的命令行&quot;&gt;其他有用的命令行&lt;/h2&gt;

&lt;p&gt;一些好用的命令(基本的什么&lt;code class=&quot;highlighter-rouge&quot;&gt;ls/cd/cp/rm&lt;/code&gt;之类的这里就直接忽略了), 我觉得作为程序猿还是应该了解, 至少只当某个场景下直接用相应的命令就能解决. 具体参数可以再 &lt;code class=&quot;highlighter-rouge&quot;&gt;--help&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;man commond&lt;/code&gt;  再看.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;screen: 特别是 ssh 到登录远程时用以管理会话&lt;/li&gt;
  &lt;li&gt;curl: 网络请求, 相关的还有 &lt;code class=&quot;highlighter-rouge&quot;&gt;traceroute, dig&lt;/code&gt; 等&lt;/li&gt;
  &lt;li&gt;find: 文件查找&lt;/li&gt;
  &lt;li&gt;grep/zgrep/zcat: 查看日志的时候用&lt;/li&gt;
  &lt;li&gt;awk: 这个本身就很强大了, 具体编程语法不用太掌握但可以了解一些基本的用法, 比如之前用到过给一个log文件, 能够取里面的参数拼接update 的sql(文件里有相应 update 的值和 where 条件值)&lt;/li&gt;
  &lt;li&gt;sed: 文本替换, 还有 &lt;code class=&quot;highlighter-rouge&quot;&gt;tr&lt;/code&gt;, 注意 sed 的语法 Mac 和 一般 Linux 还有些不一样( 比如原文替换的时候 mac 里需要用参数 &lt;code class=&quot;highlighter-rouge&quot;&gt;-i &quot;&quot;&lt;/code&gt;), 比如之前&lt;a href=&quot;/blog/give-up-wordpress-to-jekyll.html&quot;&gt;迁移 wordpress 到 jekyll&lt;/a&gt; 上的时候需要将一些链接整体替换成新的路径.&lt;/li&gt;
  &lt;li&gt;cut: 按列取数据, &lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt; 也可以&lt;/li&gt;
  &lt;li&gt;sort: 这个就不多说了&lt;/li&gt;
  &lt;li&gt;uniq: 一般和 &lt;code class=&quot;highlighter-rouge&quot;&gt;sort&lt;/code&gt; 一块用, 只能去重相邻的行&lt;/li&gt;
  &lt;li&gt;diff: 比较文件, 类似的还有 &lt;code class=&quot;highlighter-rouge&quot;&gt;comm&lt;/code&gt; (输出3列, 分别是: 只在文件1, 只在文件2 和两个文件都在的行)&lt;/li&gt;
  &lt;li&gt;paste: 两个文件按列拼接&lt;/li&gt;
  &lt;li&gt;od: 以16/8/2进制查看文件&lt;/li&gt;
  &lt;li&gt;wc: 统计文件字节数/字数/行数&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;结合这些命令可能就能完成某些复杂的功能, 举个例子, 如线上的web 访问日志会记录 &lt;em&gt;请求时间, 请求路径, 参数&lt;/em&gt; 等等. 现在需要统计 当天请求路径为 A, 排名前10的参数, 就可以 ` grep 路径A&lt;/td&gt;
      &lt;td&gt;cut 取出想要的数据列&lt;/td&gt;
      &lt;td&gt;sort&lt;/td&gt;
      &lt;td&gt;uniq ` 之类的, 或者比如统计http 404 请求最多的10个路径. 再比如, 随机生成3个长度为8包含字母数字的字符串(偶尔会用到, 比如各种生产 secret key 的时候),  直接用如下命令即可&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  _includes git:(source) ✗ cat /dev/urandom | sed 's/[^a-zA-Z0-9]//g' | head -n 3 | cut -c 1-8
MaL6nEmZ
00m2Ub19
rsc4AOQm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其他的可能较少用, 但一旦用, 能省不少时间. 网上也有一些 online 的工具, 但哪有这个快准狠.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;openssl sha1/aes-256-ecb/des/base64 等等: 比如当前我们开发用的 MVC 框架play framework用来加密 session 的算法, 可以方便算出 encoded 的 sessionid 进行 debug.&lt;/li&gt;
  &lt;li&gt;md5/base64: 常见的 md5, base64 编码&lt;/li&gt;
  &lt;li&gt;sips: &lt;code class=&quot;highlighter-rouge&quot;&gt;scriptable image processing system&lt;/code&gt; 比如批量处理图片大小, 压缩等等&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;全文完, 关于 Mac 使用技巧和工具软件推荐, 一共如下3篇文章:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.tanglei.name/blog/app-in-mac-preface.html&quot;&gt;Mac 软件推荐(序)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.tanglei.name/blog/app-in-mac-for-common.html&quot;&gt;Mac 软件推荐续 – 大众篇&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.tanglei.name/blog/app-in-mac-for-dev.html&quot;&gt;Mac 软件推荐续 – 程序猿篇&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;p.s 如果你觉得这文章对你有那么一点点收获, 请不要犹豫扫描下面二维码关注我的公众号, 如果你再能帮忙转发一下就更好了. 么么哒.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/wechat-tangleithu.jpg&quot; alt=&quot;tanglei 微信号&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Dec 2016 00:00:00 +0000</pubDate>
        <link>https://www.tanglei.name/blog/app-in-mac-for-dev.html</link>
        <guid isPermaLink="true">https://www.tanglei.name/blog/app-in-mac-for-dev.html</guid>
        
        <category>经验技巧</category>
        
        <category>工具</category>
        
        <category>Mac</category>
        
        <category>程序员</category>
        
        
        <category>经验技巧</category>
        
      </item>
    
      <item>
        <title>Mac 软件推荐续(!程序猿篇)</title>
        <description>&lt;p&gt;注意题目, “程序猿篇”前面有逻辑运算符“!”, 其实不太恰当, 这篇不是说程序猿不能用, 也不是只针对程序猿的, 总之就是针对普通大众啦~ Alfred, RescueTime, Moom, Karabiner, Manico, MacDown, Near Lock, iStat Menus, Parallels Desktop, Squirrel 你听说过几个? 
(&lt;strong&gt;update&lt;/strong&gt;: 被这个题目给蠢哭了, 非程序员并不能看懂前面的“!”, 以为是给程序猿写的, 就不会继续看了, 程序猿看懂了“!”, 认为针对非程序猿的, 也就不会继续往下看了!!)&lt;/p&gt;

&lt;h2 id=&quot;alfred-v2&quot;&gt;Alfred v2&lt;/h2&gt;
&lt;p&gt;在&lt;a href=&quot;http://www.tanglei.name/blog/app-in-mac-preface.html&quot;&gt;前面一篇文章&lt;/a&gt;中, 其实也已经推荐了这个神器了, 这里再强调并补充一个大家可能会用到的workflow, 即印象笔记(evernote): 可以快速搜索印象笔记/evernote 中保存的内容.&lt;/p&gt;

&lt;p&gt;这个得首先去 &lt;a href=&quot;https://app.yinxiang.com/api/DeveloperToken.action&quot;&gt;印象笔记官网&lt;/a&gt; 生成一个 token, 然后安装 &lt;a href=&quot;https://github.com/tl3shi/alfred-evernote&quot;&gt;alfred-evernote&lt;/a&gt; 并配置好(es-token 你自己的generated-token) token, 成功后即可使用. 查询支持不同的语法格式, 详情可以看 &lt;a href=&quot;https://dev.evernote.com/doc/articles/search_grammar.php&quot;&gt;evernote 查询语法&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/app-in-mac/alfred-es-search.png&quot; alt=&quot;alfred-workflow-for-evernote&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图所示, 搜索某关键字后直接回车则是默认在应用程序中打开, 按住 cmd 后会从浏览器中打开该笔记. 由于最开始开发的作者是国际版 evernote, 中国版补丁的作者也忘记改这个链接了, 所以在浏览器中打开的跳转链接不对, 直接下载我修改后 workflow 是 OK 的, 请从&lt;a href=&quot;https://github.com/tl3shi/alfred-evernote&quot;&gt;github&lt;/a&gt; 下载, 其实就是修改一下其中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt;中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;get-link&lt;/code&gt;方法(将 &lt;code class=&quot;highlighter-rouge&quot;&gt;https://www.evernote.com&lt;/code&gt; 替换成 &lt;code class=&quot;highlighter-rouge&quot;&gt;https://app.yinxiang.com&lt;/code&gt; ).&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;rescuetime&quot;&gt;RescueTime&lt;/h2&gt;
&lt;p&gt;时间管理&lt;/p&gt;

&lt;p&gt;这个软件可以悄无声息的帮你记录你使用电脑的情况, 包括对各种软件用时统计, 分类统计, 并且还支持多种平台(win/mac/ubuntu/android/等), 可以定期出报告, 比如每周邮件出周报, 汇报你当周的使用情况.&lt;/p&gt;

&lt;p&gt;来个例子, 如下图所示为我某一周的周报:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/app-in-mac/rescuetime-email.png&quot; alt=&quot;rescuetime weekly report&quot; /&gt;&lt;/p&gt;

&lt;p&gt;周报显示该周我用了电脑近47个小时, 综合生产力评分79%. 这个生产力评分是根据你使用不同软件的不同时间加权计算出来的. 一些通用的软件, RescueTime 能够自动识别, 比如可能用iTerm2 或者 VisualStudio 等软件会归属于&lt;em&gt;Software Development&lt;/em&gt;大类, 属于 &lt;code class=&quot;highlighter-rouge&quot;&gt;very productive&lt;/code&gt; 级别, 使用 wechat 或者 QQ, 就被判断为 &lt;code class=&quot;highlighter-rouge&quot;&gt;distracting&lt;/code&gt;, 当然你可以自定义设置, 一些软件本身没有能识别出来的, 也需要你手动去设置级别. 具体浏览网页的数据需要安装相应的Chrome 插件.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/app-in-mac/rescuetime-detail.png&quot; alt=&quot;rescuetime detail report&quot; /&gt;&lt;/p&gt;

&lt;p&gt;网页版本的可以看到更加详细的记录. 你还可以设置一些目标, 比如当天需要使用&lt;em&gt;productive&lt;/em&gt;的软件3小时以上, RescueTime可以汇报你完成目标的情况.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/app-in-mac/rescuetime.png&quot; alt=&quot;rescuetime report&quot; /&gt;&lt;/p&gt;

&lt;p&gt;免费版本的也足够用了, 付费版本的可以看到更长时间段的或更详细的年报等数据. 
或许这个软件能够帮助你更好的管理时间, 或者它仅仅是不辞辛劳帮你记录下你使用电脑/手机情况也是极好的. 所以墙裂推荐大家用这款软件.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;moom&quot;&gt;Moom&lt;/h2&gt;
&lt;p&gt;窗口管理&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/app-in-mac/moom.png&quot; alt=&quot;moom&quot; /&gt;&lt;/p&gt;

&lt;p&gt;利用这个软件可以很方便快捷的对应用程序窗口进行管理, 能够让多个窗口整齐的摆放在桌面上. 设置好快捷键后, 激活然后加方向键可以让当前应用程序准确定位到并充满桌面的1/2, 1/4等, 或者移动到另外一个屏幕(程序员多屏用得较广泛). 当然还可以自己设置比如充满整个屏幕的3/4, 等等. 直接用键盘快捷键即可完成的功能, 就不需要再移动手去用鼠标/trackpad去最大/小化改变窗口大小等等了.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;karabiner&quot;&gt;Karabiner&lt;/h2&gt;
&lt;p&gt;键盘映射&lt;/p&gt;

&lt;p&gt;我第一次使用时, 是因为我使用了外接键盘(如下图), 我把外接键盘放到内置笔记本键盘上, 就需要禁用掉内置键盘, 每次去手动调整当然很麻烦. 于是就找到这个软件帮助我.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.tanglei.name/resources/buy-in-hhkb-pro2-type-s/hhkb-pro2-mini-usb-connector.jpg&quot; alt=&quot;hhkp pro2 type-s&quot; /&gt;&lt;/p&gt;

&lt;p&gt;它可以帮助我自动切换外界键盘和内置笔记本键盘(插拔USB外接键盘自动切换), 除此之外, 它还支持很多功能. 
举例而言因为我用的 HHKB 是没有单独方向键, 用内置的组合方向键又特别别扭, 就可以利用它帮助映射. 比如我选择启用了 &lt;em&gt;Vi Mode&lt;/em&gt; , 用 &lt;strong&gt;s + h/l/j/k&lt;/strong&gt;, 或者 再启用 &lt;em&gt;Emacs Mode&lt;/em&gt;, 用 &lt;strong&gt;ctrl + p/n/b/f&lt;/strong&gt;代表方向键. (其实 Mac 很多快捷键都跟 Emacs 中的快捷键一致的, 准备再下一篇文章中再详细介绍常用快捷键及推荐适用于开发者的应用)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;manico&quot;&gt;Manico&lt;/h2&gt;
&lt;p&gt;快速切换应用程序&lt;/p&gt;

&lt;p&gt;长按 &lt;code class=&quot;highlighter-rouge&quot;&gt;alt&lt;/code&gt; 键盘可弹出切换菜单, + 具体的数字或者字母即可快速切换, 不需要再连续按键 &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd+tab&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd+shift+tab&lt;/code&gt; 来回切换了.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/app-in-mac/manico1.png&quot; alt=&quot;Manico&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;macdown&quot;&gt;MacDown&lt;/h2&gt;
&lt;p&gt;文档编辑&lt;/p&gt;

&lt;p&gt;Markdown 文本编辑器, 支持 WYSIWYG(What You See Is What You Get, 所见即所得) 类似 Mou, MacDown 直接支持类似 latex 语法, 
例如可以方便地输入数学公式用 &lt;code class=&quot;highlighter-rouge&quot;&gt;$$2^x + log_2y^{2+z}$$&lt;/code&gt;, 
因其对此类数学公式和代码高亮等支持得更好更方便, 因此我选用了 MacDown.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/app-in-mac/macdown.png&quot; alt=&quot;macdown&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果你还不知道什么是 Markdown, 可以花时间学一些, 用熟悉了, 估计你都不太想再用 Office Word 了.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;cheetsheet&quot;&gt;cheetsheet&lt;/h2&gt;
&lt;p&gt;快捷键提示&lt;/p&gt;

&lt;p&gt;只需要长按 &lt;em&gt;cmd&lt;/em&gt;, 可弹出当前 active 的软件的快捷键.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/app-in-mac/cheetsheet.png&quot; alt=&quot;cheetsheet&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;near-lock&quot;&gt;Near Lock&lt;/h2&gt;
&lt;p&gt;装13神器&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.nearlock.me/&quot;&gt;NearLock&lt;/a&gt; 这款软件是 Mac + iPhone 结合使用, 利用蓝牙进行距离感应, 能够对 Mac 电脑进行自动锁屏/开锁.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/app-in-mac/nearlock-small.png&quot; alt=&quot;Near Lock&quot; /&gt;
上图我将手机和Mac的软件截图放在一块了, 内外两层分别是Mac和手机上的截图, 从中能够看到手机与Mac之间的距离, 当前解锁/锁屏状态, 可以设置锁屏/解锁的距离阈值或者修改锁定设置为休眠或屏保.&lt;/p&gt;

&lt;p&gt;想象一下, 正对着电脑 working 呢, 突然来电话了, 以前可能需要手动锁屏然后拿手机到外面(方便接电话的地方)接电话, (不锁屏, 让同事发现你看了不该看的东西就不好了! :) 阴险脸 ), 接完电话回来后, 再手动输入密码登入电脑.&lt;/p&gt;

&lt;p&gt;而自从有了这个软件, 拿着电话直接离开便是, 软件自动帮你锁屏, 回来的时候, 刚坐到电脑屏幕前, 便看见软件自动帮你输入密码登入系统(目睹这个过程相当爽啊). 节约时间不说, 这看起来多高大上啊. 所以这款软件可是装 X 的神器啊.&lt;/p&gt;

&lt;p&gt;(有兴趣的同学可以开发下支持Win/Android的)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;istat-menus&quot;&gt;iStat Menus&lt;/h2&gt;
&lt;p&gt;资源状态&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/app-in-mac/istat-menu.png&quot; alt=&quot;iStat Menus&quot; /&gt;&lt;/p&gt;

&lt;p&gt;状态栏上显示当前电脑的运行状况, CPU/内存/网络IO等等, 比如发现电脑突然变慢了, 发现 CPU 暴涨, 可以方便地抓出是哪个应用程序. 别看到CPU利用率都占满小方框了, 听到电脑风扇“呼呼”响了, 还一直操作电脑.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;cleanapp&quot;&gt;CleanApp&lt;/h2&gt;
&lt;p&gt;清理电脑&lt;/p&gt;

&lt;p&gt;清理电脑(删除软件)的工具, 类似 CleanMyMac 之类的工具. 其实我认为此类软件在 Mac上用处不是很大, 想要删除某个 App, 直接进 &lt;strong&gt;/Applications&lt;/strong&gt; 目录直接删除那个应用程序即可. 因为 Mac 应用程序数据基本上都存在 &lt;em&gt;/Applications/xx.app&lt;/em&gt; 这个目录下, 虽然表面上看 &lt;em&gt;xx.app&lt;/em&gt; 是个应用程序文件, 双击即可运行. 只不过 CleanApp/CleanMyMac 能够删除更多的一些&lt;em&gt;.plist&lt;/em&gt;等类似配置信息等(这个占用空间真的很小).&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;parallels-desktop&quot;&gt;Parallels Desktop&lt;/h2&gt;
&lt;p&gt;虚拟机&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/app-in-mac/parallel-win8.png&quot; alt=&quot;parallel-win8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有的软件/网页, 我们还不得不用 Win 系统, 比如某些银行的网银啊, 再比如敝司的 OA 系统(墙裂鄙视)只支持 IE. 这个时候就不得不用一下 Win 系统. Win 下用得多的虚拟机是 VMWare, Mac 下这个软件类似. Win 系统可以跑在这个 App 下, 可以和 Mac “无缝” 连接在一起. 类似的虚拟机软件还有 VirtualBox, VMWare 等.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;squirrel&quot;&gt;Squirrel&lt;/h2&gt;
&lt;p&gt;输入法&lt;/p&gt;

&lt;p&gt;这是一款开源的输入法软件, 我曾经也试用过一段时间, 但最终还是因为词库同步等比较麻烦(比如不能方便的将手机输入的词库和 PC 同步), 就放弃了. 
&lt;img src=&quot;/resources/app-in-mac/squirrel.gif&quot; alt=&quot;Mac 输入法Squirrel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上图是”明无梦”用「小鹤双拼·语句流」输入的效果, 中英混输 + Emoji 表情哦, 我刚开始也是被这个效果所吸引尝试的 (然而后来并没驾驭得了). 
这个输入法高端玩家可以试试. 定制性极强, 经过配置可以打造成你自己独一无二的输入法.&lt;/p&gt;

&lt;p&gt;想试用/体验的”玩家”可以参考这篇文章 &lt;a href=&quot;http://www.dreamxu.com/install-config-squirrel/&quot;&gt;安装及配置 Mac 上的 Rime 输入法——鼠鬚管 (Squirrel)&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;全文完, 下一篇将介绍我认为程序员可能会用到的一些好用的软件.&lt;/p&gt;

&lt;p&gt;p.s 如果你觉得这文章对你有那么一点点收获, 请不要犹豫扫描下面二维码关注我的公众号, 如果你再能帮忙转发一下就更好了. 么么哒.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/wechat-tangleithu.jpg&quot; alt=&quot;tanglei 微信号&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Nov 2016 00:00:00 +0000</pubDate>
        <link>https://www.tanglei.name/blog/app-in-mac-for-common.html</link>
        <guid isPermaLink="true">https://www.tanglei.name/blog/app-in-mac-for-common.html</guid>
        
        <category>经验技巧</category>
        
        <category>工具</category>
        
        <category>Mac</category>
        
        
        <category>经验技巧</category>
        
      </item>
    
      <item>
        <title>Mac 软件推荐(序)</title>
        <description>&lt;p&gt;如果你在使用 Mac 电脑, 并且没有如某些人那样愚蠢地安装 Windows 系统, 那么你可以尝试使用以下一些软件. 下面的这些软件都是我自己使用过且觉得还不错的, 在这里推荐给大家.  或者可以极大地提高效率或者可以足够装13. (注: 这里的软件不一定是软件开发者才会使用到的)&lt;/p&gt;

&lt;h2 id=&quot;alfred-v2&quot;&gt;Alfred v2&lt;/h2&gt;

&lt;p&gt;这个软件很多文章都在说, 我这里就不多做介绍了. 其具体效果跟 Mac 自带的 Spotlight 类似, 但功能会强大 N 个数量级倍. 我居然不是12年底刚接触 Mac 时用的她(为啥当初没人推荐给我, 直到我快工作了才用上). 如果你看到这篇文章且还没有用, 就赶紧用起来吧. 免费版本的功能也都挺强悍的.&lt;/p&gt;

&lt;p&gt;举例说下常用的几个功能:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;文件搜索, 类似 windows 版本的 everything. 设置某个标识(示例中为 “’“)开头, 后面为关键字就开始全盘索引(当然可以配置过滤)了, 找到搜索到的文件后, 按 “-&amp;gt;” 出现二级菜单, 下一步的操作. 比如复制, 以此命令行 &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; 到文件/目录(后面有类似的工具推荐), 复制文件路径(finder 不比 windows 能够方便 copy 文件路径)等.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/resources/app-in-mac/alfred-file-search.png&quot; alt=&quot;alfred-file-search&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;搜索引擎搜索, 同样可以设置关键字, 比如 “google keywords”, 回车就能直接打开 google 搜索. 默认的有 google/wiki/gmail/amazon等等, 这个还可以自己方便添加更多的 search, 比如 baidu 等等.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;其他的比如, 联系人搜索, 快捷功能(lock/sleep/shutdown)等等, 计算器(直接输入等式即可), 输入应用名称快速打开应用等等.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/resources/app-in-mac/alfred-quick-search.png&quot; alt=&quot;alfred-quick-search&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Workflow 是其更强大的卖点. 比如以下一些或者极其高效或者很有意思的 workflow.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dash: 程序员神器啊. 结合 Dash, 能够非常方便快捷地搜索某种语言的某个 API, 再也不用边写边打开浏览器去搜索了. 遇到了 某个 API 不太清楚, 直接 &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl + blank&lt;/code&gt; 输入关键字就直接模糊搜索某 API 了.
&lt;img src=&quot;/resources/app-in-mac/dash.png&quot; alt=&quot;alfred-dash&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;stackoverflow: 程序猿, 你懂得. 同样设置关键字(例如 &lt;code class=&quot;highlighter-rouge&quot;&gt;st keywords&lt;/code&gt;) 就能直接搜索 stackoverflow 上相关问题. 相当于在 google 搜索中 &lt;code class=&quot;highlighter-rouge&quot;&gt;keywords site:stackoverflow.com&lt;/code&gt;;
&lt;img src=&quot;/resources/app-in-mac/alfred-st.png&quot; alt=&quot;alfred-stackoverflow&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;youdao 翻译, 遇到中英文翻译问题不用再打开浏览器去搜索了. (当然Mac 自带的取词翻译功能也挺不错的: 不知道? 选中关键字, 三指轻点 trackpad )
&lt;img src=&quot;/resources/app-in-mac/youdao.png&quot; alt=&quot;alfred-youdao&quot; /&gt;
&lt;img src=&quot;/resources/app-in-mac/mac-translate-trackpad.png&quot; alt=&quot;mac-translate&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;zhihu: 知乎搜索及知乎日报, 可以设置关键字直接知乎搜索, 或者列出当天的知乎日报推荐列表.
&lt;img src=&quot;/resources/app-in-mac/zhihu-daily.png&quot; alt=&quot;alfred-zhihu&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;douban: 豆瓣的相关功能, 豆瓣读书/电影等.  最近听到同事谈论某电影, 想看豆瓣评分多少? 很简答, 直接 &lt;code class=&quot;highlighter-rouge&quot;&gt;movie 电影名&lt;/code&gt; 就出来结果了, 如图
&lt;img src=&quot;/resources/app-in-mac/douban-movie.png&quot; alt=&quot;alfred-douban&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;tianqi: 调用百度的 API 实现的快捷天气预报
&lt;img src=&quot;/resources/app-in-mac/baidu-tianqi.png&quot; alt=&quot;alfred-weather&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;mail: 快速搜索邮件
&lt;img src=&quot;/resources/app-in-mac/mail.png&quot; alt=&quot;alfred-mail&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;印象笔记(evernote): 快速搜索印象笔记/evernote 中保存的内容
这个得首先去 &lt;a href=&quot;https://app.yinxiang.com/api/DeveloperToken.action&quot;&gt;印象笔记官网&lt;/a&gt; 生成一个 token, 然后安装好 &lt;a href=&quot;https://github.com/tl3shi/alfred-evernote&quot;&gt;alfred-evernote&lt;/a&gt;后, 配置好(es-token 你自己的generated-token) token 成功后就可以使用了. 查询有不同的语法格式, 详情可以看&lt;a href=&quot;https://dev.evernote.com/doc/articles/search_grammar.php&quot;&gt;这里&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/resources/app-in-mac/alfred-es-search.png&quot; alt=&quot;alfred-印象笔记 workflow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;搜索后直接回车打开是默认在应用程序中打开, 按住 cmd 后会在浏览器中打开(由于最开始开发的作者是国际版 evernote, 中国版补丁的作者也忘记改这个链接了, 所以在浏览器中打开的跳转链接不对, 直接下载我修改后 workflow 是 OK 的 &lt;a href=&quot;https://github.com/tl3shi/alfred-evernote&quot;&gt;github&lt;/a&gt;), 其实就是修改一下其中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt;中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;get-link&lt;/code&gt;方法.&lt;/p&gt;

&lt;p&gt;当然还有更多其他好玩有用的 workflow, 你可以直接到&lt;a href=&quot;https://github.com/hzlzh/AlfredWorkflow.com&quot;&gt;github 这里&lt;/a&gt;“选购”, 没有的, 你也可以自己实现(也比较简单, 用 php/python 等都可以实现, 你打开 alfred 设置项, 双击具体某个 workflow 就能看到源码)一个也贡献出来哦.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;未完待续&lt;/em&gt;…&lt;/p&gt;

&lt;p&gt;p.s 其实刚开始是准备1篇写完的, 但目前到此结束一篇了. 一方面内容确实有点多, 另外一个方面也从文章数量上让这公众号多点, 阴险脸.  再一个方面, 大家如果没有使用的, 也可以按照我这个推送节奏1次使用或者熟悉1个软件.&lt;/p&gt;

&lt;p&gt;p.p.s 如果你觉得这文章对你有那么一点点收获, 能帮忙转发一下么. 么么哒&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;本文同步发于”唐磊coder”微信公众号(tangleithu)(较微信原文有修改), 欢迎有兴趣的同学扫码关注, 谢谢.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/wechat-tangleithu.jpg&quot; alt=&quot;微信公众号&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Nov 2016 00:00:00 +0000</pubDate>
        <link>https://www.tanglei.name/blog/app-in-mac-preface.html</link>
        <guid isPermaLink="true">https://www.tanglei.name/blog/app-in-mac-preface.html</guid>
        
        <category>经验技巧</category>
        
        <category>工具</category>
        
        <category>Mac</category>
        
        
        <category>经验技巧</category>
        
      </item>
    
      <item>
        <title>由一次磁盘告警引发的血案 -- du 和 ls 的区别</title>
        <description>&lt;p&gt;&lt;img src=&quot;/resources/difference-between-du-and-ls/du-ls.jpg&quot; alt=&quot;difference-between-du-and-ls&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果你完全不明白或者完全明白图片含义, 那么你不用继续往下看了. 否则, 这篇文章也许正是你需要的.&lt;/p&gt;

&lt;h3 id=&quot;背景&quot;&gt;背景&lt;/h3&gt;

&lt;p&gt;确切地说，不是收到的自动告警短信或者邮件告诉我某机器上的磁盘满了，而是某同学人肉发现该机器写不了新文件才发现该问题的.  说明我司告警服务还不太稳定 :)&lt;/p&gt;

&lt;p&gt;第一次出现该问题时, 我的处理方式是: 先删了 &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp/&lt;/code&gt; 目录, 空闲出部分空间, 然后检查下几个常用的用户目录, 最终发现某服务A的日志文件(contentutil.log)占用了好几个大G, 询问相关开发人员后确定该日志文件不需要压缩备份, 所以可直接删除, 于是 &lt;code class=&quot;highlighter-rouge&quot;&gt;rm contentutil.log&lt;/code&gt; 之后就天真地认为万事大吉了…(不懂为啥当初没 &lt;code class=&quot;highlighter-rouge&quot;&gt;df&lt;/code&gt; 再看看)&lt;/p&gt;

&lt;p&gt;然而, 大约xx天后, 发现该机器磁盘又满了, 惊呼奇怪咋这么快又满了. 最终发现是上次 &lt;code class=&quot;highlighter-rouge&quot;&gt;rm contentutil.log&lt;/code&gt; 后, 占用好几个大G的contentutil.log 一直被服务A的进程打开了, &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt; 后空间并没有释放. 
&lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt; 其实是删除该文件名到文件真正保存到磁盘位置的链接, 此时该文件句柄还被服务A打开, 因此对应的数据并没有被回收, 其实可以理解为 GC 里面的引用计数, &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt; 只是减少了引用计数, 并没有真正的进行释放内存, 当引用计数为0的时候, OS 内核才会释放空间, 供其他进程使用. 所以当A进程停止(文件句柄的引用计数会变为0)或者重启后, 占用的存储空间才被释放(从某种程度上讲说明该服务一直很稳定, 可以连续跑很久不出故障~ 微笑脸). 
(tip: 如果不知道具体进程或文件名的话：&lt;code class=&quot;highlighter-rouge&quot;&gt;lsof | grep deleted&lt;/code&gt;，这样会查找所有被删除的但是文件句柄没有释放的文件和相应的进程，然后再kill掉进程或者重启进程即可).&lt;/p&gt;

&lt;p&gt;后来, 白老板告知可以用修改文件内容的方式在不用重启进程的情况下释放空间.&lt;/p&gt;

&lt;h3 id=&quot;du-vs-ls&quot;&gt;du vs ls&lt;/h3&gt;

&lt;p&gt;前两天该问题又出现了, 该服务A的日志文件(contentutil.log)占用了约7.6G(请原谅我们没有对该服务的日志做logrotate)。这一次学聪明了, 直接用&lt;code class=&quot;highlighter-rouge&quot;&gt;echo 'hello' &amp;gt; contentutil.log&lt;/code&gt;, 然后 &lt;code class=&quot;highlighter-rouge&quot;&gt;df&lt;/code&gt; 确认磁盘空间确实已经释放, 心想着这次可以 Happy 了, 突然手贱执行了下 &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;du&lt;/code&gt;, 有了以下结果:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@xxx shangtongdai-content-util]# ls -lah contentutil.log
-rw-r--r--. 1 root root 7.6G Nov  7 19:36 contentutil.log
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@xxx shangtongdai-content-util]# du -h contentutil.log
2.3M    contentutil.log
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;反正我看到这样的结果是百思不得其解, 如果你已经明确为什么会产生这样的结果, 那就不用继续往下看了.
可以明确的是, 这里的 &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;du&lt;/code&gt; 结果肯定代表不同的含义, 具体原因不详, 在查阅相关资料和咨询强大的票圈后了解到, 这大概与文件空洞和稀疏文件(holes in ‘sparse’ files)相关.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; 的结果是 apparent sizes, 我的理解是文件长度, 就类似文件系统中 file 这个数据结构中的定义文件长度的这个字段, &lt;code class=&quot;highlighter-rouge&quot;&gt;du&lt;/code&gt; 的结果 disk usage, 即真正占用存储空间的大小, 且默认度量单位是 block. (apparent sizes 和 disk usage 说法摘自 &lt;code class=&quot;highlighter-rouge&quot;&gt;man du&lt;/code&gt; 中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;--apparent-size&lt;/code&gt; 部分)&lt;/p&gt;

&lt;p&gt;给出一个具体的示例:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Mac OS 10.11.6 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;15G1004&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
➜  _drafts git:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ✗ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n a &amp;gt;1B.log
➜  _drafts git:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ✗ ls -las 1B.log
8 -rw-r--r--  1 tanglei  staff  1 11  9 00:06 1B.log
➜  _drafts git:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ✗ du 1B.log
8	1B.log
➜  _drafts git:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ✗ du -h 1B.log
4.0K	1B.log
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面示例中, 文件 1B.log 内容仅仅包含一个字母”a”, 文件长度为1个字节, 前面的 8 为占用的存储空间 8 个 block, (ls -s 的结果跟 du 的结果等价, 都是实际占用磁盘的空间), 为什么1个字节的文件需要占用8个 block 呢, 可以这样理解, &lt;em&gt;block&lt;/em&gt; 为磁盘存储的基本的单位, 方便磁盘寻址等(这里说的基本单位应该是磁盘物理结构单位例如一个扇区/柱面等, 对应一个物理单位), 而此处的block可以理解为一个逻辑单位, 且一个文件除了包括数据外, 还需要存储描述此文件的其他信息, 因此包含1个字节的文件实际在磁盘中占用的存储空间不止1个字节. 默认情况下, Mac中1个逻辑block中是 512 字节, 因此 &lt;code class=&quot;highlighter-rouge&quot;&gt;du -h&lt;/code&gt; 结果是 &lt;code class=&quot;highlighter-rouge&quot;&gt;8 * 512 = 4096 = 4.0K&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the environment variable BLOCKSIZE is set, and the -k option is not specified, the block counts will be displayed in units of that size block.  If BLOCKSIZE is not set, and the -k option is not specified, the block counts will be displayed in 512-byte blocks. (&lt;code class=&quot;highlighter-rouge&quot;&gt;man du&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因此, 通常情况下, &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; 的结果应该比 &lt;code class=&quot;highlighter-rouge&quot;&gt;du&lt;/code&gt;的结果更小(都指用默认的参数执行, 调整参数可使其表达含义相同), 然而上面跑服务 A 的机器上 contentutil.log 的对比结果是 &lt;code class=&quot;highlighter-rouge&quot;&gt;7.6G vs. 2.3M&lt;/code&gt;, 仍然无法理解了. 
沿着 &lt;a href=&quot;https://linux.die.net/man/1/du&quot;&gt;man du&lt;/a&gt; 可以看到:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;although the apparent size is usually smaller, it may be larger due to holes in (‘sparse’) files, internal fragmentation, indirect blocks, and the like&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;即因contentutil.log是一个稀疏文件, 虽然其文件长度很大, 到7.6G了, 然而其中包含大量的&lt;code class=&quot;highlighter-rouge&quot;&gt;holes&lt;/code&gt;并不占用实际的存储空间.&lt;/p&gt;

&lt;p&gt;下面用一个具体的例子来复现以上遇到的问题. 注意以下例子为 Linux version 2.6.32 (Red Hat 4.4.7)中运行结果, 且在 Mac 中并不能复现(后文有指出为什么我的Mac不能复现).&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 从标准输入中读取 &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 个block, 输出到 sparse-file 中, 
// 一个 block 的大小为1k&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1k&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 输出时先将写指针移动到 seek 位置的地方
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@localhost ~]# dd &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sparse-file &lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1k &lt;span class=&quot;nv&quot;&gt;seek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5120 &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
0+0 records &lt;span class=&quot;k&quot;&gt;in
&lt;/span&gt;0+0 records out
0 bytes &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0 B&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; copied, 1.6329e-05 s, 0.0 kB/s
// 所以此时的文件长度为: 5M &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 5120&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;1k&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1024&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 5242880
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@localhost ~]# ls -l sparse-file
-rw-r--r--. 1 root root 5242880 Nov  8 11:32 sparse-file
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@localhost ~]# ls -ls sparse-file
0 -rw-r--r--. 1 root root 5242880 Nov  8 11:32 sparse-file
// 而 sparse-file 占用的存储空间为 0 个 block
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@localhost ~]# du sparse-file
0	sparse-file
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@localhost ~]# du -h sparse-file
0	sparse-file
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;此时若用 vim 打开该文件, 用二进制形式查看 (tip &lt;code class=&quot;highlighter-rouge&quot;&gt;:%!xxd&lt;/code&gt; 可以更改当前文件显示为2进制形式), 能看到里面的内容全是&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;. 或者直接用&lt;code class=&quot;highlighter-rouge&quot;&gt;od&lt;/code&gt;命令查看2进制.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// vim 二进制查看
0000000: 0000 0000 0000 0000 0000 0000 0000 0000  ................
0000010: 0000 0000 0000 0000 0000 0000 0000 0000  ................
....
//od -b sparse-file
0000000   000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
24000000
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;实际上, Sparse 文件是并不占用磁盘存储空间的, 那为什么能看到文件里面包含很多0? 因为当在读取稀疏文件的时候, 文件系统根据文件的 metadata(就是前面所指描述文件的这个数据结构)自动用&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;填充[ref Wiki]; Wiki上还说, 现代的不少文件系统都支持 Sparse 文件, 包括 Unix 及其变种和 NTFS, 然而Apple File System(APFS)不支持, 因此我在我的 Mac 上用 &lt;code class=&quot;highlighter-rouge&quot;&gt;du&lt;/code&gt; 查看占用空间与 &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; 的结果一致. 传闻指出 Apple 在今年6月的 WWWC 上宣称支持 Sparse 文件. (貌似目前我的系统版本还不支持)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// In Mac
➜  ~ dd &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sparse-file &lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1k &lt;span class=&quot;nv&quot;&gt;seek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5120 &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
0+0 records &lt;span class=&quot;k&quot;&gt;in
&lt;/span&gt;0+0 records out
0 bytes transferred &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.000024 secs &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0 bytes/sec&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
➜  ~ ls -ls sparse-file
10240 -rw-r--r--  1 tanglei  staff  5242880 11  9 09:44 sparse-file
➜  ~ du sparse-file
10240	sparse-file
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以上是用 &lt;code class=&quot;highlighter-rouge&quot;&gt;dd&lt;/code&gt; 等命令创建稀疏文件, 也有同学用 c 代码实现了相同的功能. 其实就是写文件的时候, 改变下当前文件写指针. 前面遇到的问题就应该类似.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./filetest.log&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_RDWR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;O_CREAT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;O_EXCL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_IRUSR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S_IWUSR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;open&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;write&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lseek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEEK_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lseek&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;write&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以上先将”hello”写入filetest.log, 然后改变文件指针到&lt;code class=&quot;highlighter-rouge&quot;&gt;1024*1024*10&lt;/code&gt;(相当于文件长度这个字段变大了), gcc 编译后运行结果文件详情如下:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@localhost ~]# ls -ls filetest.log
8 -rw-------. 1 root root 10485772 Nov  9 17:45 filetest.log
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@localhost ~]# du  filetest.log
8	filetest.log
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@localhost ~]# du -h filetest.log
8.0K	filetest.log
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@localhost ~]# ls -lh filetest.log
-rw-------. 1 root root 11M Nov  9 17:45 filetest.log
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@localhost ~]# od -c filetest.log
0000000   h   e   l   l   o  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;
0000020  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
50000000  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;   h   e   l   l   o  &lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;
50000014
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;解释下结果: 文件长度应该是 “hello” 加上 “\n” 共6个字节&lt;code class=&quot;highlighter-rouge&quot;&gt;*2 = 12&lt;/code&gt;, 再加上&lt;code class=&quot;highlighter-rouge&quot;&gt;1024*1024*10&lt;/code&gt;个字节, 即为&lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;产生的结果10485772个字节约11M, 而&lt;code class=&quot;highlighter-rouge&quot;&gt;du&lt;/code&gt;的结果为8个block也为8k(这台机器上的block大小与前面的Mac不一样, 这里是1024).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Display values are in units of the first available SIZE from –block-size, and the DU_BLOCK_SIZE, BLOCK_SIZE and BLOCKSIZE environment variables.  Otherwise, units default to 1024 bytes (or 512 if POSIXLY_CORRECT is set. (&lt;code class=&quot;highlighter-rouge&quot;&gt;du --help&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;

&lt;p&gt;总结一下: 出现以上问题说明自己对一些基础掌握得尚不牢固, 比如&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;rm 某文件后, 文件占用的磁盘空间并不是立即释放, 而是其句柄没有被任意一个进程引用时才回收;&lt;/li&gt;
  &lt;li&gt;ls/du 命令结果的具体含义;&lt;/li&gt;
  &lt;li&gt;稀疏文件.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;然而这些知识点都在《UNIX环境高级编程》这本书中有讲 (之前走马观花看过不少, 咋对稀疏文件等一点印象都木有!)&lt;/p&gt;

&lt;p&gt;以上内容若有不清楚或不正确的地方, 还望大家指出, 感谢.&lt;/p&gt;

&lt;p&gt;另外, 我最终也开通了一个微信公众号, 欢迎有兴趣的同学扫码关注, 谢谢.
&lt;img src=&quot;/resources/wechat-tangleithu.jpg&quot; alt=&quot;微信公众号&quot; /&gt;&lt;/p&gt;

&lt;p&gt;参考资料:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Sparse_file&quot;&gt;wiki Sparse_file&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://linux.die.net/man/1/du&quot;&gt;man du&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/todd911/article/details/11237627&quot;&gt;《UNIX环境高级编程》笔记–read函数，write函数，lseek函数&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/coldplayerest/archive/2012/02/19/2358098.html&quot;&gt;为什么用ls和du显示出来的文件大小有差别？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.qiusuo.im/blog/2014/08/18/rm-daemon-log/&quot;&gt;删除守护进程的日志&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;UNIX环境高级编程 第2版, 第3章 文件 I/O, 第4章 文件和目录&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 09 Nov 2016 00:00:00 +0000</pubDate>
        <link>https://www.tanglei.name/blog/difference-between-du-and-ls.html</link>
        <guid isPermaLink="true">https://www.tanglei.name/blog/difference-between-du-and-ls.html</guid>
        
        <category>经验技巧</category>
        
        <category>Linux</category>
        
        
        <category>除臭虫</category>
        
      </item>
    
      <item>
        <title>长白山旅游</title>
        <description>&lt;p&gt;&lt;img src=&quot;/resources/travel-to-changbai-mountain/changbai-mountain-west-0.jpg&quot; alt=&quot;长白山-西坡全景拼接图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;据说是韩国人圣山的长白山，圣在天池的净水，美在游客的心里。对于去过九寨沟以及黄山的游客来说长白山也只能美在心里了，眼福还是饱不够的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/travel-to-changbai-mountain/changbai-mountain-north-waterfall.jpg&quot; alt=&quot;长白山-大小瀑布&quot; /&gt;&lt;/p&gt;

&lt;p&gt;长白山北坡、西坡、南坡归中国，南坡未开放，而东边就属于闭关守国的朝鲜领地了。北坡看天池如同在巍峨山尖俯瞰地下温泉，净水、白雪、蓝天、白云的排列组合婉如18岁少女变婀娜多姿，羞涩的时候给自己抹上团团雾气神秘感油然而生，这也是大家常说看天池是缘分，神圣池水的真时美貌只待有缘人。北坡除了天池的美景便是车途的胆战心惊了，山路十八弯，弯出了游客们的惊与叹。同车10人如同一边以坐过山车般的尖叫感叹白山的巍峨陡峭，一边以观看水墨画卷的惊叹赞颂白山的广袤奇美。当然管理当局收了昂贵的门票以及车费后还是良心的安排了实在是不能再随意的景点了。。。&lt;/p&gt;

&lt;p&gt;地势相对较低的西坡视野广阔，层次感不强。近距离亲近圣水的同时，火山喷发后焦黑的土壤也随之映入眼帘，伴你登山的雪景、仿佛触手可及的白云是1442歩登顶栈道的最佳伙伴，与西坡朴实的美景也是绝配，不枉汗水淋漓、不枉狂风与皮肤的野蛮摩擦、也不枉无所次的咬牙前行。&lt;/p&gt;

&lt;p&gt;提到了闭关守国的朝鲜人们，我可算是眼见为实。一江之隔的朝鲜，其全国第3大城市顶多我们一个大点的县城。社会主义制度的朝鲜，火车站婉如我们的公交车站，光秃秃的山上可怜得没有几颗像样的树木，司机说朝鲜人民用树木跟我们换粮食了。这也是用制度在牺牲一个民族的精神食量呀，可悲。朝鲜边界每个200米一个士兵站岗，中国边界每隔200米一个摄像探头，这一穷一富的鲜明对比给鸭绿江增添了别致的风景。&lt;/p&gt;

&lt;p&gt;6月份的望天鹅是素颜的，白河镇的夜景美是淡妆后的清新舒适。长春的净月潭是露营、婚纱照、高尔夫的聚集地，长春人民周末近郊游的绝佳选择。&lt;/p&gt;

&lt;p&gt;风景可圈可点，包了眼福可不能亏了全身，找个舒适的酒店、包一两轻奢的suv能给旅途带来更好的体验。东边的菜量都是管饱的，美食诱惑在这可没有落脚地儿。清奢新主义，现代的年轻人时间是宝贵的，条件允许就双飞，时间允许就与火车作伴过夜。5天的行程有些拖沓，6月的长白山1天足以，退去南方的细腻，北方的美景往往是粗犷的，或许冬天去滑雪溜冰，挑战大自然就别有一番风景。&lt;/p&gt;

&lt;p&gt;以上文字by alice, 配图by tanglei. 下面的流水帐来自tanglei(也符合我的风格)。&lt;/p&gt;

&lt;p&gt;本次旅游是带上家人一起出游(如果有机会的话，尽量以后每1~2年带上他们一块出来旅游)，上有70+的老人，也有不足2的小孩，因此放弃了抱团的旅游，决定自由行。决定去长白山后，就先后叫家人聚集北京。大致行程是：&lt;code class=&quot;highlighter-rouge&quot;&gt; 北京 -- (卧铺) --&amp;gt; 长春 -- (包车) --&amp;gt; 松江河(入住3天) &amp;lt;--(包车)--&amp;gt; 望天鹅，长白山北坡，长白山西坡 --&amp;gt; (卧铺) --&amp;gt; 沈阳 --(动车) --&amp;gt; 北京 &lt;/code&gt;。 具体而言（流水帐也是干货哦）：&lt;/p&gt;

&lt;h3 id=&quot;第1天&quot;&gt;第1天&lt;/h3&gt;

&lt;p&gt;6.23晚~Z117~北京(21:09)出发到长春(05:17), 睡一觉就到长春，时间上还不错。然后吃早饭， 长春逛逛，主要就是去净月潭玩了下。网上联系的包车（有需要可以直接拨打我们乘坐的司机的电话进行预约131-8072-3888）从长春到松江河，只有包车，长途汽车一来时间不合适(都是早上)，二来时间也久(价钱差不多100/人)。包车一般是别克GL8商务，拼车的话前两排130/人，后一排100/人，整车就是&lt;code class=&quot;highlighter-rouge&quot;&gt;130*3+100*3=690&lt;/code&gt;. 我们一行6大人1小孩刚好能坐满整辆车，690. 当时我们刚开始让酒店联系的司机，后来那边说不能来，我自己就联系了，结果酒店那边又有人来，就搞混了，还挺尴尬的。反正尽早确定好哪个司机即可。（也可以自己某宝联系，价格可能800-900）。（为啥客车100，包车6人才700？因为他们是跑往返的，一般从松江河去长春就得确定回来的乘客，不然跑单面不划算，因此乘客的话也要尽早确定车辆）。我们当时让司机来净月潭接，直接发往松江河。 大概3个半小时到达入住的家庭旅馆(宜家时尚入住), 给司机700元(也没让找那10元了)。中途给司机聊家常啊什么的，司机告诉了我们若去望天鹅，司机带去买票的话便宜25元/张。原价100，司机带去买也就75元。这个信息很重要啊， 能省不少呢，所以去望天鹅的时候得主动跟包车的司机说这个事情，不然我估计包车司机不会按照75算了（虽然这75估计司机也&lt;strong&gt;可能可能可能&lt;/strong&gt;还有提成，但也比自己去现场买100便宜不少啊。）&lt;/p&gt;

&lt;p&gt;净月潭花费: 30门票 + 20观光车 + 60高尔夫(含50左右球)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/travel-to-changbai-mountain/jing-yue-tan.jpg&quot; alt=&quot;净月潭&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6.24跟旅馆老板尤师傅(旅馆老板范*琴的丈夫)商量包车的行程（直接也问了价格了差不多是望天鹅600，北坡400，西坡200，车的话就是五菱宏光7坐车），呃，顺便说一下住宿的价格，一般80-120标间，自己跟老板讲，也可以网上订(比如我们就是第一晚在网上订的，后面的直接跟老板现金)。尤师傅提到：第一天去望天鹅及后面一天去西坡都没问题，但去北坡的话由于二道白河那边警察查得严格，他家车7座不能超载(我们多一个小孩), 因此只能2辆车，每辆400. 为了让我们更便宜些，望天鹅可以给我们便宜100即500，西坡再便宜50即150. 于是就先答应了去望天鹅，后面北坡再看。&lt;/p&gt;

&lt;h3 id=&quot;第2天&quot;&gt;第2天&lt;/h3&gt;

&lt;p&gt;第二天6.25下雨，长白山是不用去了，去了估计也不能看到天池。因此家庭旅馆的老板包车去望天鹅。望天鹅这个旅游过程中，尤师傅待我们很好，体验很佳，主动在景美的地方停车让我们拍拍照，介绍介绍等等。去往望天鹅的过程中会路过鸭绿江，鸭绿江对面即是朝鲜(上图中有照片)。这与第2天去的北坡的司机形成了强烈的对比啊。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/travel-to-changbai-mountain/the-north-kerea.jpg&quot; alt=&quot;鸭绿江及其对岸的朝鲜&quot; /&gt;&lt;/p&gt;

&lt;p&gt;25晚回来后，因为尤师傅说的超载问题(超载问题的真实性暂且不表)，为啥提出拆分成2个车呢， 因为他家有一大(7座)一小(普通小汽车), 第二天他7座车要用，送另外的人去望天鹅，拆成2个的话仍然可以用他家的一辆小车，他再另外帮忙找另一辆小车即可。这个建议也是在情理之中的。但对于我们来讲：1) 两辆车我们同行人硬被拆分成2个小队，不方便。 2) 本来400的价格，现在需要800提高了一倍。鉴于此，希望能让尤师傅帮忙找一个8座的车。最后尤师傅拨打了几个电话，最后锁定了另外一个高姓的司机(此司机简直就是XX, 反正大家以后千万别用他的车就是了), 尤师傅电话过程中有一个很关键的话术就是: “600北坡去不去？”，尤师傅当着我的面拨打的，价格也是由他提出的。最后就敲定了这个司机。相比800两辆车，这个600便宜了200我们也没多想就答应了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/travel-to-changbai-mountain/wang-tian-e.jpg&quot; alt=&quot;望天鹅&quot; /&gt;
望天鹅景点花费：75门票(含环保车)&lt;/p&gt;

&lt;h3 id=&quot;第3天&quot;&gt;第3天&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/resources/travel-to-changbai-mountain/er-dao-bai-he.jpg&quot; alt=&quot;二道白河镇&quot; /&gt;
这个司机是一辆8座的面包车，第二天就送我们去北坡。途中也没遇到所谓超载查车的问题。600也就认了，但这个高师傅真是太差劲了（跟带我们去望天鹅的尤师傅相比，简直就是天壤之别）。具体表现在：1) 我们还在游览北坡的时候，他就屡次打电话短信催让我们早点下山，好早点回松江河。2) 在二道白河的时候，我们提出想下车拍照，他一路借口不准停车，不让我们下车，最后我们一再坚持的情况下才停了车。 3) 我们下车不到10分钟，就催我们赶紧上车回。二道白河镇上的景其实都挺漂亮的（如上图二道白河镇的两建筑倒影照片），可惜遇上了个SB司机，真TM扫兴。4) 途中问为何去望天鹅才500，北坡就得收600. 他回答这边距离远，共170-180公里, (这个距离地图一看就能看到，我们也没拆穿他), 然后路不好开废油什么的。还撒谎说他们家也开酒店(后回旅馆确认他家没开)，满口谎言。大家以后游玩的时候一定&lt;strong&gt;不要找高师傅&lt;/strong&gt;15843928081, 一定&lt;strong&gt;不要&lt;/strong&gt;找高师傅15843928081, 一定&lt;strong&gt;不要找高师傅15843928081&lt;/strong&gt;. 他的8座长安车车牌是(吉K-21287)。&lt;/p&gt;

&lt;p&gt;从北坡回来后跟旅馆老板尤师傅反映了这件事情，后面一天让他帮忙重新换一辆车。尤师傅又帮忙打电话联系车，最后帮忙联系了另一辆长安车，告诉我们车稍微破点，车破点没关心反正不想找这个高师傅了。联系过程中尤师傅并没有像前1天联系去北坡的那样主动报价600问去不去，而是根本没有提价格. 挂电话后我确认价格是150. 从这两次帮忙联系车的过程中，我有正当的理由&lt;strong&gt;怀疑&lt;/strong&gt;可能会有回扣。最后我们离开后直接问了范姐(旅馆老板，之前最开始网上就是联系的她)，他们表示否定。我只陈述我了解到的事实，不对真正是否吃回扣的事实做保证。尤师傅确实对我们很好啊，带我们去望天鹅，帮忙联系车等等。我宁愿相信尤师傅他们确确实实就是帮忙联系车，并没有吃回扣这一事情，把不好的印象全留给高师傅吧。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/travel-to-changbai-mountain/changbai-mountain-north.jpg&quot; alt=&quot;长白山-北坡&quot; /&gt;&lt;/p&gt;

&lt;p&gt;北坡景点花费: 125门票 + 85环保车 + 80(上天池的倒站车)&lt;/p&gt;

&lt;h3 id=&quot;第4天&quot;&gt;第4天&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/resources/travel-to-changbai-mountain/changbai-mountain-west-ladder-canyon.jpg&quot; alt=&quot;长白山-西坡1442级台阶+西坡大峡谷&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第4天游览西坡下午回来就直接驱车去松江河火车站了。西坡我们去的时间不太好，就开放了天池和大峡谷，其他景点没开放。所以相比门票不划算啊。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/travel-to-changbai-mountain/changbai-mountain-west-1.jpg&quot; alt=&quot;长白山-西坡全景拼接图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;西坡景点花费：125门票 + 85环保车。&lt;/p&gt;

&lt;h3 id=&quot;第5天&quot;&gt;第5天&lt;/h3&gt;

&lt;p&gt;第5天早上到达沈阳后，就参观了918博物馆，下午动车回北京。&lt;/p&gt;

&lt;p&gt;行程完毕。 总体来说，游玩的还不错，因为看到天池了呀~ 网上说的是大约全年有1/3的时间都看不到天池，而我们西坡和北坡都看到天池了呀。北坡的高师傅简直就是一个败笔。&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Jul 2016 00:00:00 +0000</pubDate>
        <link>https://www.tanglei.name/blog/travel-to-changbai-mountain.html</link>
        <guid isPermaLink="true">https://www.tanglei.name/blog/travel-to-changbai-mountain.html</guid>
        
        <category>旅游</category>
        
        <category>玩遍中国</category>
        
        
        <category>旅游</category>
        
      </item>
    
      <item>
        <title>入手传说中的 HHKB Pro2 Type-S</title>
        <description>&lt;p&gt;今年生日给自己入手了一个生日礼物了, 那就是传说中的程序猿键盘 – HHKB. 
之前室友买的HHKB Pro2 Type-S 有刻版本, 后来他又买了无刻的键帽, 于是我就直接买HHKB Pro2 Type-S无刻版本了, 日本亚马逊官网29800日元. 由于最近刚好有朋友去日本游玩, 然后刚好又有朋友在日本工作, 于是就是采用直接日亚购买寄给日本朋友A, 再让朋友B在日本玩耍时找朋友A人肉带回来即可. 由于恰逢跨境购物之类的海关税收改革, 担心被税, 所以直接让朋友拆掉包装, 扔了外壳直接将裸键盘带回来了. 其实后来看5000RMB以内貌似不必担心(&lt;a href=&quot;http://zhuanlan.zhihu.com/p/20738384&quot;&gt;实力辟谣：海关新政后出境游购物怎么办？&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;先上一张我现在桌面放的一张图片, Pro2 Type-S 白色有刻版, 为啥要放在桌面上, 因为我目前为止海记不熟无刻版的键位啊.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/buy-in-hhkb-pro2-type-s/hhkb-pro2-type-s-with-print.png&quot; alt=&quot;HHKB Pro2 Type-S 白色有刻&quot; /&gt;&lt;/p&gt;

&lt;p&gt;和我公司电脑MBPR的合影, 因为之前就把电脑的Caps Lock键映射成了 Ctrl了, 所以直接切换过来还比较顺手和省力. 然后发现这HHKB的键盘 USB接口在前面啊, 这个设计不太喜欢. 囧了, 都挡住屏幕了(见后, 可以另外买一个弯头解决). 另外再配一个trackpad又嫌太贵, 就直接放在原来的笔记本内置键盘上吧.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/buy-in-hhkb-pro2-type-s/hhkb-pro2-type-s-on-mbpr.jpg&quot; alt=&quot;HHKB Pro2 Type-S 无刻 配 MacBook Pro Retina&quot; /&gt;
再上一个侧面照. 
&lt;img src=&quot;/resources/buy-in-hhkb-pro2-type-s/hhkb-pro2-type-s-on-mbpr-right.jpg&quot; alt=&quot;HHKB Pro2 Type-S 无刻 配 MacBook Pro Retina&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面这张是回家后与自己的Air合影. 前面的USB接口还是碍眼. 
&lt;img src=&quot;/resources/buy-in-hhkb-pro2-type-s/hhkb-pro2-type-s-on-mba.jpg&quot; alt=&quot;HHKB Pro2 Type-S 配MacBook Air&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是印在键盘背部的开关说明. 可以根据自己的喜好来配置. 
&lt;img src=&quot;/resources/buy-in-hhkb-pro2-type-s/hhkb-pro2-type-s-back.jpg&quot; alt=&quot;HHKB Pro2 Type-S 背面配置&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面来硬货.&lt;/p&gt;

&lt;h3 id=&quot;hhkb小技巧&quot;&gt;HHKB小技巧&lt;/h3&gt;

&lt;p&gt;其实这不仅仅是说HHKB的, 而更多的时一些在使用Mac的小技巧. 这里也一并分享一下(其实是不是应该将标题改为&lt;b&gt;“Mac软件推荐”&lt;/b&gt;然后重新考虑新po一篇啊).&lt;/p&gt;

&lt;h4 id=&quot;0-下载hhkb驱动&quot;&gt;0. 下载HHKB驱动&lt;/h4&gt;

&lt;p&gt;先去pfu官网下一个驱动. 这个驱动解决了如 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}[]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&quot;&lt;/span&gt;&lt;/code&gt; 等键位可能错乱, 跟相应有刻标的不一致, 我开始用的时候就发生了这种情况. &lt;a href=&quot;http://www.pfu.co.jp/hhkeyboard/macdownload.html&quot;&gt;驱动下载地址&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-mini-usb-弯头&quot;&gt;1. Mini-USB 弯头&lt;/h4&gt;

&lt;p&gt;上面的图片也能看到, 那个mini-usb头在前面, 直直的, 挺别扭的, 还容易挡住前面的屏幕. 因此如果要用MacBook自带的trackpad的话, 买一个Mini-USB的弯头时很有必要的. (这里参考了&lt;a href=&quot;http://synckey.github.io/posts/2016/02/26/hhkb-settings-and-shortcut-keys.html#comment-2634817881&quot;&gt;ref&lt;/a&gt;)如下图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/buy-in-hhkb-pro2-type-s/hhkb-pro2-mini-usb-connector.jpg&quot; alt=&quot;HHKB Pro2 Type-S 键盘mini-usb弯头&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-karabiner&quot;&gt;2. Karabiner&lt;/h4&gt;

&lt;p&gt;安装这个软件&lt;a href=&quot;https://pqrs.org/osx/karabiner/&quot;&gt;Karabiner&lt;/a&gt;. 刚开始试图找一些shell脚本来启用禁用内置键盘切换外接键盘, github上有一个&lt;a href=&quot;https://github.com/tl3shi/HHKBAssistant_for_mac.git&quot;&gt;HHKBAssistant_for_mac&lt;/a&gt;, 貌似不太好使用. 后来才了解到这个软件Karabinlar, 功能很强大. 我刚开始使用(目前版本10.18.0), 也仅仅启用了下面两个功能:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自动切换键盘. 当外接键盘插入时, 自动禁用内置笔记本键盘, 启用USB键盘; 取掉USB键盘, 自动启用内置键盘. 这个设置在 &lt;code class=&quot;highlighter-rouge&quot;&gt;core settings -- Disable an internal keyboard while external keyboards are connected.&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Vi Mode. HHKB键盘没有方向键, 需要集合Fn键才能按方向键(&lt;code class=&quot;highlighter-rouge&quot;&gt;Fn + [;'.&lt;/code&gt;). 启用Vi Mode, 记这些比较麻烦, 启用Vi Mode 可以结合常用的&lt;code class=&quot;highlighter-rouge&quot;&gt;hjkl&lt;/code&gt; 来表示方向, 另外将&lt;code class=&quot;highlighter-rouge&quot;&gt;Fn&lt;/code&gt;用&lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;替换, 按起来比较方便.  启用这个功能后, 还可以结合&lt;code class=&quot;highlighter-rouge&quot;&gt;s+Fn + (hjkl)&lt;/code&gt;来表示 &lt;code class=&quot;highlighter-rouge&quot;&gt;Home, Page Down, Page Up, End&lt;/code&gt; (这个我道没怎么用)&lt;/li&gt;
  &lt;li&gt;其他还有很多功能后面慢慢再来发现利用吧.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3-常用快捷键&quot;&gt;3. 常用快捷键&lt;/h4&gt;

&lt;p&gt;Mac本身的一些常用的快捷键得记住, 跟Emacs的一些基本操作一致. 这个当然跟HHKB键盘没多大的关系, 这个键盘结合这些快捷键更好用嘛.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ctrl + p/n: 上/下个命令
ctrl + b/f: 光标前/后char
esc + b/f: 光标前/后word
ctrl + a/e: 到行首/行尾
ctrl + h/d: 删前/后字符
ctrl + u: 删除到行首(zsh全删)
ctrl + k: 删除到行尾
ctrl + y: 粘贴
ctrl + w: 删除前一个单词
esc + d: 删后一个单词
ctrl + _: undo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;zsh中 bindkey 列出快捷键(其中&lt;code class=&quot;highlighter-rouge&quot;&gt;^[ = esc&lt;/code&gt;)&lt;/p&gt;

&lt;h4 id=&quot;4-oh-my-zsh&quot;&gt;4. Oh My ZSH&lt;/h4&gt;

&lt;p&gt;这里再推荐一个shell, 不用bash, 用zsh, 非常丰富的插件功能啊. 见官网 &lt;a href=&quot;http://ohmyz.sh/&quot;&gt;Oh My ZSH&lt;/a&gt;. 比如命令行补全功能啊等, 比如下图所示, 你之前敲过一个命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin source&lt;/code&gt;, 你下次再敲时, 就有 autocomplete 功能, 此时光标还在&lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt;处, 后面已经帮你提示好了, 你只需要按前面提道的快捷键&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + E&lt;/code&gt;跳转到行末即可.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/buy-in-hhkb-pro2-type-s/zsh-shell-tip.png&quot; alt=&quot;ZSH 命令行自动提示autocomplete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;还有一些常用的插件比如:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;git: 上图也所体现&lt;/li&gt;
  &lt;li&gt;zsh-autosuggestions: 自动提示&lt;a href=&quot;https://github.com/zsh-users/zsh-autosuggestions&quot;&gt;git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;zsh-syntax-highlighting: 语法高亮&lt;/li&gt;
  &lt;li&gt;autojump: 会记住你的一些常用的历史记录位置, 并且带纠错功能(目录中一两个字符输错了也不要紧). 你常常需要比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;cd ~/xx1/xx2/dir5&lt;/code&gt; 乱七八糟的, 这个功能使得你只需键入 &lt;code class=&quot;highlighter-rouge&quot;&gt;j dir5&lt;/code&gt; 即可.&lt;/li&gt;
  &lt;li&gt;osx: 比如你现在正在 Finder 中浏览某些文件夹. 此时你正想通过 shell 去处理. 不用你去慢慢看绝对路径是啥, 只需要打开zsh, 然后输入 &lt;code class=&quot;highlighter-rouge&quot;&gt;cdf&lt;/code&gt; 即跳转到你当前Finder中的路径中.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;5-alfred&quot;&gt;5. Alfred&lt;/h4&gt;

&lt;p&gt;这个就不多说了, 太好用了. &lt;a href=&quot;http://alfredworkflow.com/&quot;&gt;alfred workflow&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;6-moom&quot;&gt;6. Moom&lt;/h4&gt;

&lt;p&gt;用快捷键改变窗口布局和在多显示器间移动窗口.&lt;/p&gt;

&lt;h4 id=&quot;7-dash&quot;&gt;7. Dash&lt;/h4&gt;

&lt;p&gt;离线文档, 配合Alfred更佳.&lt;/p&gt;

&lt;h4 id=&quot;8-cvim&quot;&gt;8. cVim&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/cvim/ihlenndgcmojhcghmfjfneahoeklbjjh&quot;&gt;cVim&lt;/a&gt;浏览器插件: 使用 VIM 方式控制 Chrome 浏览器的插件, 
或者&lt;a href=&quot;https://chrome.google.com/webstore/detail/dbepggeogbaibhgnhhndojpepiihcmeb&quot;&gt;Vimium&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;其他还有很多, 这里分享这几个常见的.&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Apr 2016 00:00:00 +0000</pubDate>
        <link>https://www.tanglei.name/blog/buy-in-hhkb-pro2-type-s.html</link>
        <guid isPermaLink="true">https://www.tanglei.name/blog/buy-in-hhkb-pro2-type-s.html</guid>
        
        <category>MyLife</category>
        
        <category>快捷键</category>
        
        <category>工具</category>
        
        
        <category>经验技巧</category>
        
      </item>
    
  </channel>
</rss>
